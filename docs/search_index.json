[["python.html", "Sección 4 Python 4.1 Breve introducción a los lenguajes de programación. 4.2 Entornos interactivos 4.3 Palabras reservadas de Python. 4.4 Sintaxis de nombres en Python 4.5 Tipos de datos 4.6 Flujo de control 4.7 Visualización de datos 4.8 Manipulación de bases de datos 4.9 Análisis exploratorio de bases de datos 4.10 Funciones y scripts 4.11 Buenas practicas 4.12 Procesamiento de alto rendimiento 4.13 Programación en paralelo", " Sección 4 Python Python es un lenguaje de programación de alto nivel, interactivo e interpretado. Es de código abierto, multi-plataforma y se adecua a diversos paradigmas de programación como lo es la programación orientada a objetos. El intérprete de Python y su amplia gama de bibliotecas estándar están disponibles de forma gratuita para la mayoría de plataformas en el sitio web oficial de Python. Además, este sitio proporciona documentación adicional, programas y herramientas que complementan su ecosistema. Características de Python: Sintaxis muy clara y legible. Fuerte capacidad de introspección. Orientación a objetos intuitiva. Altamente modular, soporta paquetes jerárquicos. Enfocado en el uso de excepciones para el manejo de errores. Tipos de datos dinámicos de muy alto nivel. Extensa biblioteca estándar (STL) y módulos de terceros para prácticamente todas las tareas. Extensiones y módulos fácilmente escritos en C, C + + (o Java para Jython, o. NET para IronPython). Integrable dentro de las aplicaciones como una interfaz de scripting. Aplicaciones de Python: se ha utilizado para desarrollar: Aplicaciones de escritorio. Aplicaciones web. Análisis de datos. Administración de servidores. Seguridad y análisis de penetración. Cómputo en la nube. Cómputo científico. Análisis de lenguaje natural. Visión artificial. Animación, videojuegos e imágenes generadas por computadora. Aplicaciones móviles. 4.1 Breve introducción a los lenguajes de programación. Un lenguaje se define como un conjunto de secuencias de símbolos que posibilitan la creación y transmisión de mensajes entre un emisor y un receptor. Aunque la naturaleza exhibe ciertos tipos de lenguajes, los seres humanos han desarrollado una variedad de sistemas lingüísticos de gran complejidad. Los lenguajes se componen principalmente de dos aspectos: la gramática, que aborda la estructura del lenguaje, y la semántica, que se ocupa del significado del lenguaje. La gramática, a su vez, incluye: Morfología: relacionada con la construcción de las unidades lingüísticas (género, tiempos verbales, declinaciones). Sintaxis: referente a la manera en que se deben ordenar y estructurar las unidades lingüísticas en las expresiones. En el transcurso del siglo XX, figuras como Alan Turing y Alonzo Church sentaron los fundamentos del cálculo, la programación y sus respectivos lenguajes. Los lenguajes de programación contemporáneos, a diferencia de los lenguajes naturales, presentan una morfología estructurada y simplificada diseñada para ejecutar instrucciones precisas en los sistemas informáticos. Lenguajes de alto y bajo nivel: Los lenguajes de bajo nivel, como el lenguaje ensamblador, consisten en un conjunto elemental de instrucciones que son ejecutadas directamente por la unidad de procesamiento de un sistema informático. Estos lenguajes están estrechamente vinculados al tipo de procesador que los procesa y suelen ser difíciles de elaborar e interpretar para las personas. Por otro lado, los lenguajes de alto nivel son más comprensibles para los humanos y, en general, menos dependientes del hardware específico, aunque requieren ser traducidos a lenguaje de bajo nivel para su ejecución. Lenguajes compilados e interpretados: Los lenguajes de alto nivel se comunican con los sistemas informáticos de dos maneras distintas: A través de un compilador, que traduce el código del programa a lenguaje de bajo nivel, generando un “archivo binario” que puede ser ejecutado posteriormente. Mediante un intérprete, que ejecuta las instrucciones ingresadas de inmediato. Por lo general, los lenguajes compilados son más eficientes en términos de velocidad y consumo de recursos que los lenguajes interpretados, ya que el archivo resultante es código de bajo nivel. En contraste, los lenguajes interpretados requieren un proceso adicional a través de varios niveles de abstracción antes de que las instrucciones sean ejecutadas por el sistema. Python es un lenguaje interpretado de alto nivel. 4.2 Entornos interactivos Debido a que Python es un lenguaje interpretado, es posible utilizarlo mediante un entorno interactivo (shell) o mediante el uso de scripts. El shell interactivo de Python funciona a través de una terminal. Para sistemas basados en UNIX, como GNU/Linux, y Mac OS X, es requerido abrir una terminal y llamar al shell de la siguiente manera: python Dependiendo de la versión o la forma en que fue instalado, a veces se manda a llamar con la siguiente forma: python3 Para salir del entorno interactivo usamos exit() Para desplegar el texto Hola Mundo desde en entorno interactivo sólo es necesario teclear lo siguiente: print(&quot;Hola, Mundo.&quot;) ## Hola, Mundo. 4.3 Palabras reservadas de Python. Las palabras reservadas, también conocidas como keywords, son los nombres predeterminados que el intérprete de Python proporciona de forma inherente. No se recomienda emplear estas palabras para asignar nombres a otros objetos. Para acceder al listado completo de palabras reservadas, se puede consultar ingresando help(‘keywords’) desde la interfaz interactiva de Python. help(&quot;keywords&quot;) ## ## Here is a list of the Python keywords. Enter any keyword to get more help. ## ## False class from or ## None continue global pass ## True def if raise ## and del import return ## as elif in try ## assert else is while ## async except lambda with ## await finally nonlocal yield ## break for not 4.4 Sintaxis de nombres en Python En Python 3, la sintaxis para la elaboración de nombres sigue ciertas reglas y convenciones que son importantes para escribir un código claro y legible. Aquí hay algunas pautas clave: Caracteres permitidos: Los nombres pueden incluir letras minúsculas (a-z), letras mayúsculas (A-Z), dígitos (0-9) y el guion bajo (_). No pueden comenzar con un número. Convenciones de estilo: Se recomienda seguir las convenciones de estilo de Python, que generalmente sugieren el uso de minúsculas para los nombres de variables y funciones, y mayúsculas para constantes. Para nombres compuestos, se recomienda separar las palabras con guiones bajos (snake_case). Palabras reservadas: No se pueden utilizar palabras reservadas de Python como nombres de variables, ya que estas palabras tienen significados específicos en el lenguaje y están reservadas para su uso en la sintaxis de Python. Significado claro: Es importante elegir nombres que proporcionen un significado claro y descriptivo sobre el propósito de la variable, función o clase que están representando. Esto ayuda a que el código sea más legible y comprensible para otros programadores. Evitar nombres genéricos: Trate de evitar nombres genéricos como “a”, “b”, “x”, etc. Utilice nombres que reflejen el propósito y la función de la variable o función. 4.5 Tipos de datos En Python, los tipos de datos son la base de cualquier programa. Python es un lenguaje de programación dinámico, por lo que no es necesario declarar explícitamente el tipo de datos cuando se crea una variable. A continuación, exploraremos los tipos de datos básicos en Python. Tipo de dato Descripción Ejemplo Colección Indexable Mutable int Números enteros 5, -10, 100 No No No float Números de punto flotante 3.14, -0.001, 2.0 No No No str Cadena de caracteres ‘Hola’, “Mundo” No Sí No bool Booleano (Verdadero o Falso) True, False No Sí No list Lista ordenada de elementos [1, 2, 3], [‘a’, ‘b’, ‘c’] Sí Sí Sí tuple Secuencia inmutable de elementos (1, 2, 3), (‘a’, ‘b’, ‘c’) Sí Sí No dict Colección de pares clave-valor {‘nombre’: ‘Juan’, ‘edad’: 30} Sí No Sí set Colección no ordenada de elementos únicos {1, 2, 3}, {‘a’, ‘b’, ‘c’} Sí No Sí Las colecciones son estructuras que almacenan una serie de elementos. Cada uno de estos elementos se puede considerar como una entidad independiente dentro de la colección. Los tipos indexables permiten acceder a cada elemento dentro de la colección mediante un identificador único, que puede ser un número entero (índice) o una clave, dependiendo del tipo de colección. Los tipos mutables tienen la característica de permitir la modificación de su contenido. Esto incluye la capacidad de agregar, eliminar o modificar elementos existentes en la colección. 4.5.1 Números En Python, hay tres tipos principales de números: enteros (int), números de punto flotante (float) y números complejos (complex). Veamos ejemplos de cada uno: # Entero numero_entero = 10 print(numero_entero) ## 10 # Punto flotante numero_flotante = 3.14 print(numero_flotante) ## 3.14 # Complejo numero_complejo = 2 + 3j print(numero_complejo) ## (2+3j) La precisión de los números flotantes debe ser considerada cuidadosamente, ya que está influenciada significativamente por la capacidad del equipo de cómputo. En ciertas ocasiones, las operaciones con números de tipo float pueden arrojar aproximaciones en lugar de resultados exactos. Es importante tener en cuenta estas limitaciones al trabajar con números flotantes. 2 / 3 ## 0.6666666666666666 4.5.2 Cadenas de Caracteres Las cadenas de caracteres (str) se utilizan para representar texto en Python. Se pueden definir utilizando comillas simples (’) o dobles (“): cadena_simple = &#39;Hola, mundo!&#39; print(cadena_simple) ## Hola, mundo! cadena_doble = &quot;¡Hola, Python!&quot; print(cadena_doble) ## ¡Hola, Python! 4.5.3 Listas Una lista (list) en Python es una secuencia ordenada de elementos que pueden ser de diferentes tipos. Se definen utilizando corchetes []: mi_lista = [1, 2, 3, &#39;cuatro&#39;, 5.0] print(mi_lista) ## [1, 2, 3, &#39;cuatro&#39;, 5.0] Para acceder a los elementos de una listam, podemos usar su índice. Los índices en Python comienzan desde 0 para el primer elemento y van incrementando de uno en uno. print(mi_lista[0]) # Imprime el primer elemento: 1 ## 1 print(mi_lista[3]) # Imprime &#39;cuatro&#39; ## cuatro También se puede acceder a los elementos de la lista utilizando índices negativos, los cuales cuentan desde el final de la lista hacia el principio. print(mi_lista[-1]) # Imprime el último elemento: 5.0 ## 5.0 print(mi_lista[-2]) # Imprime &#39;cuatro&#39; ## cuatro Puedes añadir elementos a una lista utilizando el método append() para agregar un elemento al final de la lista. mi_lista.append(6) print(mi_lista) ## [1, 2, 3, &#39;cuatro&#39;, 5.0, 6] También puedes extender una lista añadiendo todos los elementos de otra lista utilizando el método extend(). mi_lista.extend([7, 8, 9]) print(mi_lista) ## [1, 2, 3, &#39;cuatro&#39;, 5.0, 6, 7, 8, 9] Puedes eliminar elementos de una lista utilizando la palabra clave del seguida del índice del elemento que deseas eliminar. del mi_lista[3] # Elimina el elemento &#39;cuatro&#39; print(mi_lista) ## [1, 2, 3, 5.0, 6, 7, 8, 9] También puedes utilizar el método remove() para eliminar un elemento específico por su valor. mi_lista.remove(3) # Elimina el elemento 3 print(mi_lista) ## [1, 2, 5.0, 6, 7, 8, 9] Puedes unir dos listas utilizando el operador + o el método extend(). lista1 = [1, 2, 3] lista2 = [4, 5, 6] nueva_lista = lista1 + lista2 print(nueva_lista) ## [1, 2, 3, 4, 5, 6] lista1.extend(lista2) print(lista1) ## [1, 2, 3, 4, 5, 6] Las listas en Python son estructuras de datos versátiles y fundamentales que permiten almacenar y manipular colecciones de elementos de manera eficiente. 4.5.4 Tuplas Las tuplas (tuple) son secuencias ordenadas similares a las listas, pero son inmutables, es decir, no se pueden modificar después de su creación. Se definen utilizando paréntesis (): mi_tupla = (1, 2, 3, &#39;cuatro&#39;, 5.0) print(mi_tupla) ## (1, 2, 3, &#39;cuatro&#39;, 5.0) Para acceder a los elementos de una tupla, podemos utilizar su índice, al igual que en las listas. print(mi_tupla[0]) # Imprime el primer elemento: 1 ## 1 print(mi_tupla[3]) # Imprime &#39;cuatro&#39; ## cuatro También se puede acceder a los elementos de la tupla utilizando índices negativos, que cuentan desde el final de la tupla hacia el principio. print(mi_tupla[-1]) # Imprime el último elemento: 5.0 ## 5.0 print(mi_tupla[-2]) # Imprime &#39;cuatro&#39; ## cuatro Dado que las tuplas son inmutables, no se pueden borrar elementos individualmente ni modificar la tupla después de su creación. Aunque las tuplas son inmutables, todavía tienen algunas características útiles en Python: Empaquetado y desempaquetado de tuplas: Puedes empaquetar múltiples valores en una sola tupla y desempaquetarlos en variables individuales. tupla = 1, 2, 3 # Empaquetado de valores a, b, c = tupla # Desempaquetado en variables individuales print(a, b, c) # Imprime 1 2 3 ## 1 2 3 El empaquetado y desempaquetado de tuplas son conceptos importantes en Python que permiten trabajar con múltiples valores de manera eficiente. El empaquetado de tuplas es el proceso de agrupar múltiples valores en una sola tupla. Esto se hace simplemente colocando los valores separados por comas, sin necesidad de utilizar paréntesis, por ejemplo: tupla_empaquetada = 1, 2, 3 Aquí, hemos empaquetado los valores 1, 2 y 3 en una sola tupla llamada tupla_empaquetada. El desempaquetado de tuplas es el proceso inverso al empaquetado. Permite extraer los valores individuales de una tupla y asignarlos a variables individuales. Esto se hace asignando la tupla a la derecha del signo de igualdad y las variables a la izquierda, por ejemplo: a, b, c = tupla_empaquetada Aquí, estamos desempaquetando la tupla tupla_empaquetada y asignando sus valores a las variables a, b y c respectivamente. Algunas de las ventajas del empaquetado y desempaquetado de tuplas son las siguientes: Sintaxis concisa: El empaquetado y desempaquetado de tuplas permite escribir código de manera más concisa y legible. Asignación múltiple: Permite asignar valores a múltiples variables en una sola línea de código. Los usos más comunes que tienen son los siguientes: Intercambio de valores: Se pueden intercambiar los valores de dos variables sin necesidad de una variable temporal utilizando el desempaquetado de tuplas. a, b = b, a Retorno múltiple de funciones: Las funciones pueden devolver múltiples valores empaquetados en una tupla, y luego estos valores pueden ser desempaquetados cuando se llama a la función. def obtener_coordenadas(): return 10, 20 x, y = obtener_coordenadas() print(&quot;Coordenadas:&quot;, x, y) ## Coordenadas: 10 20 El empaquetado y desempaquetado de tuplas son herramientas poderosas que permiten trabajar con múltiples valores de manera eficiente en Python. Tuplas como claves de diccionario: Dado que las tuplas son inmutables, pueden ser utilizadas como claves en un diccionario de Python. diccionario = {(1, 2): &#39;valor&#39;, (3, 4): &#39;otro valor&#39;} print(diccionario[(1, 2)]) # Imprime &#39;valor&#39; ## valor Aunque las tuplas son más simples que las listas, su inmutabilidad las hace útiles en situaciones donde no deseas que los datos cambien después de su definición. 4.5.5 Conjuntos Los conjuntos (set) son colecciones desordenadas de elementos únicos. Se definen utilizando llaves {}: mi_conjunto = {1, 2, 3, 4, 5} print(mi_conjunto) ## {1, 2, 3, 4, 5} Los conjuntos en Python son mutables, lo que significa que puedes agregar y eliminar elementos, pero no puedes modificar los elementos existentes directamente. Para agregar elementos a un conjunto, puedes utilizar el método add(). mi_conjunto.add(6) print(mi_conjunto) ## {1, 2, 3, 4, 5, 6} Para eliminar un elemento de un conjunto, puedes usar el método remove() o discard(). La diferencia entre estos dos métodos radica en cómo manejan la eliminación de un elemento que no está presente en el conjunto. remove() generará un error, mientras que discard() no. mi_conjunto.remove(3) print(mi_conjunto) ## {1, 2, 4, 5, 6} mi_conjunto.discard(5) print(mi_conjunto) ## {1, 2, 4, 6} Los conjuntos en Python admiten operaciones comunes de teoría de conjuntos como unión, intersección y diferencia. Unión: Combina todos los elementos únicos de dos conjuntos. conjunto1 = {1, 2, 3} conjunto2 = {3, 4, 5} union = conjunto1.union(conjunto2) print(union) ## {1, 2, 3, 4, 5} Intersección: Devuelve un conjunto que contiene los elementos que son comunes a ambos conjuntos. interseccion = conjunto1.intersection(conjunto2) print(interseccion) ## {3} Diferencia: Devuelve un conjunto que contiene los elementos que están en el primer conjunto pero no en el segundo. diferencia = conjunto1.difference(conjunto2) print(diferencia) ## {1, 2} Los conjuntos son útiles cuando necesitas almacenar una colección de elementos únicos y realizar operaciones de conjuntos eficientes como la eliminación de duplicados y la comparación de colecciones. En resumen, los conjuntos en Python proporcionan una manera eficiente de trabajar con colecciones de elementos únicos y son útiles para una variedad de tareas, como la eliminación de duplicadosy la realización de operaciones de conjuntos. 4.5.6 Diccionarios Los diccionarios (dict) son colecciones de pares clave-valor. Cada elemento del diccionario tiene una clave y un valor asociado. Se definen utilizando llaves {} y separando las claves y los valores con :: mi_diccionario = {&#39;nombre&#39;: &#39;Robeto&#39;, &#39;edad&#39;: 20, &#39;ciudad&#39;: &#39;Morelia&#39;} print(mi_diccionario) ## {&#39;nombre&#39;: &#39;Robeto&#39;, &#39;edad&#39;: 20, &#39;ciudad&#39;: &#39;Morelia&#39;} Los diccionarios en Python son mutables, lo que significa que puedes agregar, modificar y eliminar elementos según sea necesario. Puedes acceder a los valores del diccionario utilizando sus claves. print(mi_diccionario[&#39;nombre&#39;]) # Imprime &#39;Roberto&#39; ## Robeto print(mi_diccionario[&#39;edad&#39;]) # Imprime 20 ## 20 Si intentas acceder a una clave que no existe en el diccionario, Python generará un error KeyError. Puedes agregar un nuevo par clave-valor al diccionario simplemente asignando un valor a una nueva clave. mi_diccionario[&#39;email&#39;] = &#39;roberto@example.com&#39; print(mi_diccionario) ## {&#39;nombre&#39;: &#39;Robeto&#39;, &#39;edad&#39;: 20, &#39;ciudad&#39;: &#39;Morelia&#39;, &#39;email&#39;: &#39;roberto@example.com&#39;} Puedes modificar el valor asociado a una clave existente del diccionario. mi_diccionario[&#39;edad&#39;] = 21 print(mi_diccionario) ## {&#39;nombre&#39;: &#39;Robeto&#39;, &#39;edad&#39;: 21, &#39;ciudad&#39;: &#39;Morelia&#39;, &#39;email&#39;: &#39;roberto@example.com&#39;} Puedes eliminar un elemento del diccionario utilizando la palabra clave del. del mi_diccionario[&#39;ciudad&#39;] print(mi_diccionario) ## {&#39;nombre&#39;: &#39;Robeto&#39;, &#39;edad&#39;: 21, &#39;email&#39;: &#39;roberto@example.com&#39;} También puedes utilizar el método pop() para eliminar un elemento y devolver su valor. valor_eliminado = mi_diccionario.pop(&#39;edad&#39;) print(valor_eliminado) # Imprime 21 ## 21 print(mi_diccionario) ## {&#39;nombre&#39;: &#39;Robeto&#39;, &#39;email&#39;: &#39;roberto@example.com&#39;} Algunos conceptos clave de los diccionarios son los siguientes: keys(), values(), items(): Estos métodos devuelven vistas de las claves, valores y pares clave-valor del diccionario, respectivamente. Ejemplo de keys(): mi_diccionario = {&#39;nombre&#39;: &#39;Juan&#39;, &#39;edad&#39;: 30, &#39;ciudad&#39;: &#39;Madrid&#39;} claves = mi_diccionario.keys() print(claves) ## dict_keys([&#39;nombre&#39;, &#39;edad&#39;, &#39;ciudad&#39;]) # Iterar sobre las claves for clave in claves: print(clave) ## nombre ## edad ## ciudad Ejemplo de values(): mi_diccionario = {&#39;nombre&#39;: &#39;Juan&#39;, &#39;edad&#39;: 30, &#39;ciudad&#39;: &#39;Madrid&#39;} valores = mi_diccionario.values() print(valores) ## dict_values([&#39;Juan&#39;, 30, &#39;Madrid&#39;]) # Iterar sobre los valores for valor in valores: print(valor) ## Juan ## 30 ## Madrid Ejemplo de items(): mi_diccionario = {&#39;nombre&#39;: &#39;Juan&#39;, &#39;edad&#39;: 30, &#39;ciudad&#39;: &#39;Madrid&#39;} items = mi_diccionario.items() print(items) ## dict_items([(&#39;nombre&#39;, &#39;Juan&#39;), (&#39;edad&#39;, 30), (&#39;ciudad&#39;, &#39;Madrid&#39;)]) # Iterar sobre los pares clave-valor for clave, valor in items: print(clave, valor) ## nombre Juan ## edad 30 ## ciudad Madrid update(): Este método agrega los elementos de un diccionario a otro diccionario existente. diccionario1 = {&#39;a&#39;: 1, &#39;b&#39;: 2} diccionario2 = {&#39;b&#39;: 3, &#39;c&#39;: 4} diccionario1.update(diccionario2) print(diccionario1) # Salida: {&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;c&#39;: 4} ## {&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;c&#39;: 4} clear(): Este método elimina todos los elementos del diccionario. mi_diccionario = {&#39;nombre&#39;: &#39;Juan&#39;, &#39;edad&#39;: 30, &#39;ciudad&#39;: &#39;Madrid&#39;} mi_diccionario.clear() print(mi_diccionario) # Salida: {} ## {} Estos métodos son muy útiles para trabajar con diccionarios en Python y permiten manipular fácilmente las claves, valores y pares clave-valor, así como agregar, eliminar y actualizar elementos en los diccionarios de manera eficiente. Los diccionarios en Python son estructuras de datos muy versátiles y se utilizan ampliamente para mapear claves a valores y para almacenar datos de manera eficiente. Son útiles para muchas tareas, como el almacenamiento de configuraciones, el modelado de datos y la manipulación de datos estructurados. 4.5.7 Operaciones Básicas Python permite realizar operaciones básicas con los tipos de datos mencionados anteriormente. A continuación, se muestran algunos ejemplos: # Operaciones numéricas resultado = 10 + 5 diferencia = 10 - 5 producto = 10 * 5 cociente = 10 / 5 modulo = 10 % 3 potencia = 10 ** 2 # Concatenación de cadenas saludo = &quot;Hola&quot; + &quot; &quot; + &quot;Mundo&quot; print(saludo) ## Hola Mundo Para acceder a los elementos de listas y tuplas podemos indicarle el índice asociado entre corchetes. mi_lista = [1, 2, 3, 4, 5] primer_elemento = mi_lista[0] print(primer_elemento) ## 1 mi_tupla = (1, 2, 3, 4, 5) ultimo_elemento = mi_tupla[-1] print(ultimo_elemento) ## 5 # Agregando elementos a un conjunto mi_conjunto = {1, 2, 3} mi_conjunto.add(4) # Accediendo a valores de un diccionario mi_diccionario = {&#39;nombre&#39;: &#39;Roberto&#39;, &#39;edad&#39;: 20} nombre = mi_diccionario[&#39;nombre&#39;] print(nombre) ## Roberto 4.5.8 Ejercicios Crea una lista que contenga los nombres de tres amigos tuyos. Crea un diccionario que represente la información de un libro (título, autor, año de publicación). Realiza la suma de dos números y guarda el resultado en una variable. Concatena dos cadenas de caracteres y muestra el resultado. 4.6 Flujo de control El flujo de control en Python se refiere a la secuencia en la que se ejecutan las instrucciones en un programa. Python ofrece varias estructuras de control que permiten tomar decisiones, repetir acciones y ejecutar código en función de condiciones específicas. 4.6.1 Estructuras de Control Condicionales 4.6.1.1 if Statement El if statement permite ejecutar un bloque de código si se cumple una condición. Por ejemplo: edad = 20 if edad &gt;= 18: print(&quot;Eres mayor de edad&quot;) ## Eres mayor de edad 4.6.1.2 if-else Statement El if-else statement ejecuta un bloque de código si se cumple una condición y otro bloque de código si la condición no se cumple. Por ejemplo: edad = 15 if edad &gt;= 18: print(&quot;Eres mayor de edad&quot;) else: print(&quot;Eres menor de edad&quot;) ## Eres menor de edad 4.6.1.3 if-elif-else Statement El if-elif-else statement permite evaluar múltiples condiciones de manera secuencial. Por ejemplo: puntuacion = 75 if puntuacion &gt;= 90: print(&quot;Excelente&quot;) elif puntuacion &gt;= 70: print(&quot;Bien&quot;) else: print(&quot;Puedes mejorar&quot;) ## Bien Ejercicios: Escribe un programa que verifique si un número es positivo, negativo o cero. Crea un programa que determine si un número es par o impar. 4.6.2 Estructuras de Control de Bucles 4.6.2.1 while Loop El bucle while ejecuta un bloque de código mientras se cumpla una condición. Por ejemplo: contador = 0 while contador &lt; 5: print(contador) contador += 1 ## 0 ## 1 ## 2 ## 3 ## 4 4.6.2.2 for Loop El bucle for itera sobre una secuencia, como una lista o una cadena de texto. Por ejemplo: frutas = [&quot;manzana&quot;, &quot;banana&quot;, &quot;cereza&quot;] for fruta in frutas: print(fruta) ## manzana ## banana ## cereza Ejercicios: Escribe un programa que muestre los números del 1 al 10 utilizando un bucle while. Crea un programa que calcule la suma de los números del 1 al 100 utilizando un bucle for. 4.6.3 Estructuras de Control de Interrupción 4.6.3.1 break Statement El break statement se utiliza para salir de un bucle antes de que se haya completado. Por ejemplo: for numero in range(10): if numero == 5: break print(numero) ## 0 ## 1 ## 2 ## 3 ## 4 4.6.3.2 continue Statement El continue statement se utiliza para saltar la iteración actual de un bucle y continuar con la siguiente. Por ejemplo: for numero in range(10): if numero == 5: continue print(numero) ## 0 ## 1 ## 2 ## 3 ## 4 ## 6 ## 7 ## 8 ## 9 Ejercicios: Escribe un programa que encuentre el primer número divisible entre 7 y 5, entre 1500 y 2700. Crea un programa que imprima los números impares del 1 al 50, excepto aquellos que sean múltiplos de 3. 4.7 Visualización de datos 4.8 Manipulación de bases de datos 4.9 Análisis exploratorio de bases de datos 4.10 Funciones y scripts 4.11 Buenas practicas 4.12 Procesamiento de alto rendimiento 4.13 Programación en paralelo "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
