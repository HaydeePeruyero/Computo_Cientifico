[["sql.html", "Sección 5 SQL 5.1 Bases de datos y manipulación 5.2 Explorar datos categóricos y texto no estructurado 5.3 Comparación con los otros programas 5.4 Valores faltantes 5.5 Combinar bases de datos", " Sección 5 SQL SQL (Structured Query Language) es un lenguaje estándar utilizado para interactuar con bases de datos relacionales. Con SQL, puedes realizar diversas operaciones, como crear, modificar y eliminar bases de datos, tablas y registros, así como recuperar y manipular datos almacenados en ellas. Cuando usamos una hoja de calculo, por lo general colocamos fórmulas para calcular nuevos valores basados en los ya existentes. Cuando usamos una base de datos relacional, enviamos comandos (queries) al manejador de la base de datos y el programa los manipula por nosotros y nos regresa los resultados en un formato tabular que podemos usar como punto de partida de otros queries. Aunque muchos sistemas de gestión de bases de datos (DBMS) entienden SQL, cada uno de ellos tiene su propia forma de almacenar los datos. Esto significa que si creas una base de datos en un sistema, como Oracle, no podrás usarla directamente en otro sistema, como MySQL, sin realizar ciertas adaptaciones. Cada DBMS tiene su propio conjunto de reglas, estructuras de datos y optimizaciones internas que afectan cómo se almacenan y manipulan los datos. Por lo tanto, las bases de datos creadas en uno de estos sistemas no son directamente compatibles con los otros. Sin embargo, la mayoría de los sistemas de gestión de bases de datos ofrecen opciones para importar y exportar datos en diferentes formatos, como CSV (valores separados por comas) y SQL. Esto significa que puedes extraer los datos de una base de datos en un sistema y luego importarlos en otro sistema usando uno de estos formatos comunes. Por ejemplo, podrías exportar los datos de una base de datos PostgreSQL a un archivo CSV y luego importar ese archivo CSV en una base de datos MySQL. Del mismo modo, podrías exportar una base de datos Oracle en formato SQL y luego ejecutar ese script SQL en una base de datos MySQL para recrear la estructura y los datos en el nuevo sistema. 5.0.1 Instalación Vamos a usar SQLite. macOS: es probable que ya tengas SQLite instalado. Para confirmarlo, puedes ejecutar el siguiente comando en una terminal: sqlite3 --version Esto te mostrará la versión de SQLite instalada en tu sistema. Si necesitas una interfaz gráfica para trabajar con bases de datos SQLite, puedes descargar “DB Browser for SQLite” desde su sitio web oficial. Linux: En sistemas Linux, es posible que SQLite3 ya esté instalado. Para verificar si está instalado y ver la ruta del programa, puedes usar el comando: which sqlite3 Si SQLite3 no está instalado, puedes instalarlo fácilmente desde el gestor de paquetes de tu distribución. Por ejemplo, en Debian/Ubuntu, puedes usar el siguiente comando: sudo apt install sqlite3 Windows: Para usuarios de Windows, se recomienda ejecutar los instaladores como administrador. Asegúrate de seleccionar la versión del instalador adecuada para tu sistema operativo. Se recomienda utilizar git para Windows, ya que proporciona una terminal que es compatible con muchos comandos UNIX, incluido SQLite3. Durante la instalación, si el instalador pregunta si deseas agregar la ruta del ejecutable a las variables de entorno (environment variables), selecciona “sí”. De lo contrario, tendrás que agregar manualmente la ruta del ejecutable a las variables de entorno PATH. Esto le dice al sistema dónde encontrar el programa ejecutable. Configuración de Anaconda: Si están utilizando Anaconda, puedes consultar la documentación específica de Anaconda sobre SQLite para obtener instrucciones sobre cómo instalarlo y configurarlo correctamente. Después de instalar SQLite3 y configurar las rutas adecuadamente, es importante cerrar la terminal y abrir una nueva. Esto garantiza que las rutas y configuraciones se carguen correctamente en la nueva sesión de terminal. 5.1 Bases de datos y manipulación 5.1.1 Seleccionar datos Primero, abriremos una terminal en tu sistema operativo. Y vamos a descargar la siguiente base de datos: survey.db Utiliza el comando cd para cambiar el directorio de trabajo de la terminal al directorio que contiene tu archivo de base de datos SQLite. Por ejemplo: cd /files2/SQL_course24/data/ Una vez en el directorio correcto, utilizamos el comando sqlite3 seguido del nombre del archivo de la base de datos para abrir la consola de SQLite. Por ejemplo: sqlite3 survey.db Esto abrirá la base de datos survey.db en la consola de SQLite, lo que nos permitirá ejecutar comandos SQL y realizar operaciones en la base de datos. NOTA: ¿Qué contien esta base de datos? Tiene información en la que se han descubierto expediciones lideradas por William Dyer, Frank Pabodie y Valentina Roerich a fines de la década de 1920 y principios de la década de 1930. Estas expediciones llevaron al Polo de Inaccesibilidad en el Pacífico Sur y luego hacia la Antártida. Los datos de estas expediciones se encontraron recientemente en un casillero de almacenamiento en la Universidad de Miskatonic. Se han digitalizado y procesado mediante reconocimiento óptico de caracteres (OCR). Una vez dentro de la consola de SQLite, puedes ejecutar comandos SQL como SELECT, INSERT, UPDATE, DELETE, etc., para interactuar con la base de datos. Para salir de la consola de SQLite y volver a la terminal, puedes usar uno de los siguientes métodos: Escribe .exit o .quit seguido de Enter en la consola de SQLite. En algunas terminales, puedes presionar Ctrl-D para salir de SQLite. Para pedir ayuda en SQlite usamos .help en la consola de SQLite y presiona Enter. Esto mostrará una lista de comandos disponibles y una breve descripción de cada uno. Nota: Los comandos en SQLite comienzan con . para diferenciarlos de los propios de SQL. Otro punto importante es que los comando no son sesitivos a mayúsculas o minúsculas y los comandos deben terminar con ;. Para saber que tablas tenemos en nuestra base de datos usamos .table. .tables sqlite&gt; .tables Person Site Survey Visited Para optener más información sobre que está almacenado en cada tabla usamos .schema, esto nos dará un descripción de las columnas y su tipo. .schema CREATE TABLE Person (id text, personal text, family text); CREATE TABLE Site (name text, lat real, long real); CREATE TABLE Survey (taken integer, person text, quant text, reading real); CREATE TABLE Visited (id integer, site text, dated text); Para cambiar la forma en que SQLite nos muestra la información: .mode column .header on Una vez con esta configuración, si queremos ver la información que hay en cada tabla podemos usar: sqlite&gt; SELECT * FROM Person id personal family -------- --------- -------- dyer William Dyer pb Frank Pabodie lake Anderson Lake roe Valentina Roerich danforth Frank Danforth En esta instrucción ya estamos usando la palabra clave SELECT, la cual nos sirve para seleccionar columnas del data base. Por ejemplo si quisieramos seleccionar solo family y personal: sqlite&gt; SELECT family, personal FROM Person; Dyer|William Pabodie|Frank Lake|Anderson Roerich|Valentina Danforth|Frank Nota: SQL no distingue entre mayúsculas y minúsculas. Esto se aplica tanto a las palabras clave de SQL (como SELECT, FROM, WHERE, etc.) como a los nombres de las tablas, columnas y cualquier otro identificador que puedas usar en tus consultas SQL. Por ejemplo, las siguientes consultas son equivalentes en SQL: SELECT * FROM Person; select * from PERSON; SeLeCt * FrOm PeRSoN; Todas estas consultas realizan la misma acción: seleccionar todas las columnas de la tabla Person. SQL ignora completamente las diferencias de mayúsculas y minúsculas en los comandos y los nombres de tablas y columnas. Esto significa que puedes escribir tus comandos SQL utilizando mayúsculas, minúsculas o una combinación de ambas, según tu preferencia o estilo de codificación. Sin embargo, se recomienda mantener una convención de nomenclatura consistente para mejorar la legibilidad y mantenibilidad del código. En SQL, es importante terminar cada comando con un punto y coma (;). Si olvidas incluir el punto y coma al final de un comando y presionas Enter, SQL interpretará que el comando no ha finalizado y mostrará un prompt adicional (...&gt;). Esto puede ser confuso para principiantes y expertos por igual. Por ejemplo, si ejecutas un comando como: SELECT id FROM Person Sin agregar el punto y coma al final, SQL mostrará un prompt adicional: ...&gt; Para corregir esto, simplemente agrega el punto y coma al final del comando y presiona Enter: SELECT id FROM Person; Es importante comprender que las filas y columnas en una tabla de base de datos no se almacenan en un orden específico. Siempre se mostrarán en algún orden, pero podemos controlarlo de varias maneras. Por ejemplo, podemos intercambiar las columnas en la salida de la consulta: SELECT personal, family FROM Person; También podemos repetir las columnas: SELECT id, id, id FROM Person; Como atajo, podemos seleccionar todas las columnas en una tabla usando *: SELECT * FROM Person; El estilo de escritura de consultas puede variar entre usuarios. Algunos prefieren escribir en minúsculas, otros en mayúsculas, y algunos utilizan una combinación de ambos. SQL es insensible a mayúsculas y minúsculas, lo que significa que SELECT y select son equivalentes. Por ejemplo: SELECT personal, family FROM person; O: select Personal, Family from PERSON; Ejercicio 1: ¿Qué columnas de la base de datos son enteros? ¿Cómo realizas esa consulta en SQL? Ejercicio 2: Realiza un query de la columna name de lde la tabla Site. 5.1.2 Ordenar y remover duplicados Vamos a usar SQL para responder dos preguntas específicas sobre los datos antárticos: ¿Qué tipos de mediciones de cantidad se tomaron en cada sitio? ¿Qué científicos tomaron mediciones en la expedición? Para responder a la primera pregunta, vamos a examinar la tabla Survey. Dado que los datos pueden ser redundantes, la consulta inicial para seleccionar los tipos de mediciones (quant) muestra múltiples entradas para los mismos tipos, lo que puede ser difícil de interpretar. Por lo tanto, se utiliza la palabra clave DISTINCT para eliminar las entradas duplicadas y hacer que la salida sea más legible. La consulta final devuelve una lista única de los tipos de mediciones tomadas en cada sitio. SELECT quant FROM Survey; Para eliminar los duplicados usamos DISTINCT SELECT DISTINCT quant FROM Survey; Si queremos saber en que visita (taken) se realizo cierta medición quant, podemos aplicar la misma estructura de DISTINCT con dos columnas. SELECT DISTINCT taken, quant FROM Survey; Para responder a la segunda pregunta, se examina la tabla Person. Dado que los registros de la base de datos no se almacenan en un orden particular, los resultados de la consulta pueden no estar ordenados como se desee. Por lo tanto, se utiliza la cláusula ORDER BY para ordenar los resultados en función de la columna id. La consulta final devuelve la información de los científicos en orden ascendente según su identificador (id). SELECT * FROM Person ORDER BY id; Por default se ordenan en orden ascendente, pero se puede ordenar en orden descendente usando DESC después de ORDER BY. SELECT * FROM person ORDER BY id DESC; Para determinar qué científico midió las cantidades durante cada visita, se debe examinar nuevamente la tabla Survey. La consulta específica ordena los resultados primero en orden ascendente según la columna taken, que representa el número de visita o una marca de tiempo de la medición. Luego, dentro de cada grupo de valores iguales en la columna taken, los resultados se ordenan en orden descendente por la columna person, que contiene los nombres de los científicos. SELECT taken, person, quant FROM Survey ORDER BY taken ASC, person DESC; 5.2 Explorar datos categóricos y texto no estructurado 5.3 Comparación con los otros programas 5.4 Valores faltantes 5.5 Combinar bases de datos "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
