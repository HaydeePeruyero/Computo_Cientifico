[{"path":"index.html","id":"temas-selectos-de-análisis-numérico-y-computación-científica-computo-científico-para-el-análisis-de-datos","chapter":"Sección 1 Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos","heading":"Sección 1 Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos","text":"Curso del posgrado conjunto en Ciencias Matemáticas PCCM UNAM UMICH 2024-2","code":""},{"path":"index.html","id":"temario","chapter":"Sección 1 Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos","heading":"1.1 Temario","text":"Git y GithubGit y GithubShellShellPythonPythonSQLSQLPower BIPower BIRREstadística multivariadaEstadística multivariadaAnálisis de regresiónAnálisis de regresión","code":""},{"path":"index.html","id":"referencias","chapter":"Sección 1 Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos","heading":"1.2 Referencias","text":"[1] Arnold, Jeremey. Learning Microsoft Power BI, O’Reilly Media, Inc.[2] Beaulieu, Alan. Learning SQL, O’Reilly Media, Inc., 2020[3] Bruce, Peter, Bruce, Andrew Gedeck, Peter. Practical Statistics Data Scientists, O’Reilly Media, Inc., 2020.[4] Crawley, Michael J. R book. John Wiley & Sons, 2012.[5] McKinney, Wes. Python data analysis. O’Reilly Media, Inc., 2022.[6] Nelli, Fabio. Python Data Analytics, Apress.[7] Wade, Ryan. Advanced Analytics Power BI R Python, Apress.[8] Wickham, Hadley, Garrett Grolemund. R data science: import, tidy, transform, visualize, \nmodel data. O Reilly Media, Inc., 2016.[9] Zamora Saiz, Alfonso, et al. Introduction Data Analysis R: Hands-Coding, Data Mining,\nVisualization Statistics Scratch., Springer (2020).[10] Software Carpentry, Unix Shell, https://swcarpentry.github.io/shell-novice/","code":""},{"path":"index.html","id":"material-interesante","chapter":"Sección 1 Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos","heading":"1.3 Material interesante","text":"Bookdown.Software Carpentry.GitWhy GitR Markdown CookbookSTHDAYaRrr! Pirate’s Guide RLearn ggplot2 Using Shiny AppGgplot2: Elegant Graphics Data Analysis\nVersión online\nVersión onlineUse R! Colección SpringerLattice: Multivariate Data Visualization RR Graphics cookbookCuenta pro de Github","code":""},{"path":"index.html","id":"datacamp","chapter":"Sección 1 Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos","heading":"1.4 DataCamp","text":"","code":""},{"path":"shell.html","id":"shell","chapter":"Sección 2 Shell","heading":"Sección 2 Shell","text":"Descargar git bash para Windows o seguir las instrucciones de Software carpentries para otros sistemas operativos.\nBasado en la lección de carpentries","code":""},{"path":"shell.html","id":"navegar-en-archivos-y-directorios","chapter":"Sección 2 Shell","heading":"2.1 Navegar en archivos y directorios","text":"Cuando abrimos una terminal por primera vez, vamos ver un prompt (usualmente es $) que nos indica que esta esperando los comandos. Después de teclear los comandos, debemos siempre presionar Enter.Para listar lo que hay en un directorio usamos el comando ls.Al comando ls le podemos agregar unos adjetivos para hacer más comprensible su lectura. Por ejemplo, la opción -F nos indica si es una carpeta, un archivo, un link, etc.Con la opción --help podemos acceder la ayuda del comando.Otras opciones que nos ayudan entender la información que tenemos en el archivo son -lh, nos muestra los permisos del archivo o carpeta, tamaño, propietario, fecha, nombre. La opción ls -nos muestra los archivos ocultos.Ejercicio: ¿Qué hace la opción -l? ¿Cómo podemos listar en orden de creación e inverso?Con el comando ls también podemos listar los archivos de cualquier otro directorio, solo debemos indicarle el directorio después del comando:El comando ls solo nos esta listando lo que hay en los directorios. Si nos queremos mover otro directorio, lo podemos hacer con el comando cd y especificando el directorio.El comando pwd nos da la ruta en la que estamos.Para movernos un directorio arriba, colocamos después de cd dos puntos.Si colocamos los dos puntos, el comando cd nos lleva al /home/.Otra forma de movernos de un directorio otro es especificando la ruta absoluta, es decir la ruta completa de donde queremos movernos.Ejercicio: ¿Qué es una ruta relativa?Otro opción útil que podemos usar con el comando cd es -.Ejercicio: ¿donde nos lleva cd -? y si volvemos colocar cd - ¿donde nos lleva? ¿Cuál es la diferencia entre cd .. y cd -?La tilde ~, shell la interpreta como el home del usuario, entonces si colocamos cd ~/directorio sería lo mismo que /home/directorio. Por ejemplo:es lo mismo queEjercicio: Supongamos que tenemos el siguiente árbol de datos en nuestra computadora y que estamos en /Users/thing/. ¿Si colocamos en la terminal ls -F ../backup que nos mostrará?Ejercicio: Explora las opciones -s y -S. ¿Hay diferencia entre mayúsculas y minúsculas?La tecla Tab nos ayuda completar los comando/rutas. Si la presionamos dos veces nos mostrará todas las posibles opciones.","code":"$ $ lsDocuments  Downloads  Music  Pictures  Videos$ ls -Fej.txt  Git/  PBI/  Python/  R/  Shell/  SQL/$ ls --help$ ls - F Shell $ cd Shell\n$ lsdata/  ej1.txt  ejercicios/$ pwd/d/Users/hayde/Documents/Curso_Comp_Cien/Shell$ cd ..$ cd $ cd /d/Users/hayde/Documents/Curso_comp_Cien$ cd ~/Desktop$ cd /c/Users/hayde/Desktop"},{"path":"shell.html","id":"manipulación-de-archivos-y-directorios","chapter":"Sección 2 Shell","heading":"2.2 Manipulación de archivos y directorios","text":"Para crear directorios/carpetas desde la línea de comandos usamos el comando mkdir nombre. Vamos crear la carpeta del curso. Es recomendable usar espacios en nombres de carpetas ni archivos.El comando mkdir nos permite crear más de un directorio y directorios anidados usando la opción -p.Para listar toda la estructura de nuestras carpetas podemos usar la opción -FR en el comando ls.Otra opción útil para listar toda la estructura de nuestro directorio es la opción tree, viene instalado por default en los sistemas operativos. En Windows, si se instalo git/bash se puede usar con tree.com.Nota: Para descargar tree y que podamos ver la estructura de árbol con archivos y carpetas hacer lo siguiente:Ir la página y descargar la versión que dice binaries.Ir la página y descargar la versión que dice binaries.Extraer lo que hay en la carpeta bin.Extraer lo que hay en la carpeta bin.Copiar el archivo tree.exe la carpeta /c/Program_files/Git/usr/bin/.Copiar el archivo tree.exe la carpeta /c/Program_files/Git/usr/bin/.Para probarlo, solo colocar en la terminal tree ruta.Para probarlo, solo colocar en la terminal tree ruta.Para crear un archivo usando el editor nano (si fue el que configuraron), se usa el comando nano nombre.extension.\nVamos crear un archivo de prueba en la carpeta ejercicios y escribamos algo en el archivo.Para guardar y salir del editor, usamos los comandos Ctrl+O o Ctrl+X seguido de Yes y enter.Si en el archivo guardaron nada, entonces se creara. Una forma de crear archivos sin abrirlos es con el comando touch.Si checamos con ls -l los archivos o rutas que creamos, veremos que tienen ningún tamaño.Para mover archivos o renombrarlos, usamos el comando mv seguido del archivo que queremos mover/renombrar y la ruta donde lo moveremos o el nuevo nombre del archivo.Lo anterior esta cambiándole el nombre al archivo ej2.txt por ejercicio2.txt.Si estamos en un directorio y queremos mover un archivo de otro directorio al directorio actual, podemos hacerlo especificando como primer argumento la ruta y nombre del archivo mover y como segundo argumento un punto ..O especificando la ruta completa.Para copiar archivos, usamos el comando cp seguido por la ruta del archivo copiar y la ruta del archivo donde se copiará. Movámonos la carpeta Shell/ejercicios.Si usamos la opción -r (recursivo) en el comando cp podemos copiar un directorio completo y todos sus elementos.Si el último parámetro de cp es un directorio que ya existe, entonces copiará todos los archivos que se indiquen ese directorio. Por ejemplo:De igual forma para mv, si el último parámetro es un directorio movera todos los archivos ese directorio.Ejercicio: ¿Cual es el output de la siguiente colección de comandos?Para borrar archivos usamos el comando rm, hay que tener cuidado cuando lo usemos ya que borra definitivamente los archivos o carpetas.Una forma segura de borrar archivos es usando la opción -, con esto nos saldrá un mensaje preguntando si en verdad deseamos borrar el archivo. Para confirmar debemos colocar y.Si queremos borrar una carpeta, debemos hacerlo con la opción -r, de lo contrario obtendremos un error.Otra opción para borrar directorios es rmdir.Para mover/copiar/eliminar multiples archivos la vez, podemos enumerarlos todos o usar comodines/patrones que sigan estos elementos. Supongamos que tenemos una lista de archivos todos con terminación .txt, entonces para borrarlos podemos usar rm *.txt. El * nos indica todo lo que este antes de .txt.Otro comodín que podemos usar es ?, pero este denota solo 1 espacio. Por ejemplo:Ejercicio: Supon que en el directorio data tienes dos archivos. ¿Cuál de los siguientes comandos te daría como resultado: ethane.pdb methane.pdb.ls *t*ane.pdbls *t*ane.pdbls *t?ne.*ls *t?ne.*ls *t??ne.pdbls *t??ne.pdbls ethane.*ls ethane.*Dos comodines más que existen son los siguientes:[...]: busca coincidencias con exactamente cada caracter dentro de los corchetes, por ejemplo [12] coincidiria con texto1.txt, texto2.tx pero con texto3.txt.[...]: busca coincidencias con exactamente cada caracter dentro de los corchetes, por ejemplo [12] coincidiria con texto1.txt, texto2.tx pero con texto3.txt.{...}: busca coincidencias con cada uno de los elementos separados por comas dentro de las llaves, por ejemplo {*.txt, *.csv} buscaría todos los archivos con terminaciones .txt y .csv pero con los que sean .pdf.{...}: busca coincidencias con cada uno de los elementos separados por comas dentro de las llaves, por ejemplo {*.txt, *.csv} buscaría todos los archivos con terminaciones .txt y .csv pero con los que sean .pdf.","code":"$ mkdir Curso_Comp_Cien$ mkdir -p Curso_Comp_Cien/Shell/data Curso_Comp_Cien/Shell/ejercicios$ ls -FR$ tree.com$ cd Curso_Comp_Cien/\n$ nano prueba.txt$ cd Shell/ejercicios\n$ touch ../ej1.txt ej2.txt ../data/ej3.csv ../data/ej4.csv$ pwd\n$ mv ej2.txt ejercicio2.txt$ mv ../ej1.txt .$ cd ..\n$ mv data/ej3.csv ejercicios/.$ pwd\n$ cp ejercicio2.txt ../ej2.txt\n$ ls -FR$ cd ejercicios\n$ cp -r ../data .$ cp archivo1.txt archivo2.txt data$ mv archivo1.txt archivo2.txt data$ pwd/Users/haydee/Curso$ ls -Farchivo.txt carpeta/$ mkdir carpeta2\n$ mv archivo.txt carpeta2/\n$ cd carpeta2\n$ cp archivo.txt ../carpeta/archivo_respaldo.txt\n$ cd ..\n$ ls -FR$ cd Shell\n$ rm ejercicios/ejercicio2.txt\n$ ls ejercicios/$ rm -i /data/ej3.csvrm: remove regular empty file 'ej3.txt'?$ rm data$ rm -r data$ cd Shell/\n$ touch prueba1.txt prueba2.txt prueba3.txt prueba4.txt prueba5.txt\n$ rm *.txt$ cd Shell/\n$ touch prueba1.txt prueba2.txt prueba3.txt prueba4.txt prueba5.txt\n$ rm prueba?.txt$ cd Shell/\n$ touch prueba1.txt prueba2.txt prueba3.txt prueba4.txt prueba5.txt\n$ rm prue???.txt"},{"path":"shell.html","id":"tuberías-y-filtros","chapter":"Sección 2 Shell","heading":"2.3 Tuberías y filtros","text":"Vamos usar los archivos de prueba de la lección de Shell de Software Carpentry. Descargarlos en el directorio que creamos que se llama Shell.Vamos explorar los archivos que están en la carpeta excercise-data/alkanes. Para contar cuantos palabras, líneas o caracteres tiene un archivo, usamos el comando wc que viene de word count.El primer número es el número de líneas del archivo, el segundo la cantidad de palabras y el tercero la cantidad de caracteres.Si usamos alguna de los comodines, por ejemplo *.pdb con el comando wc, nos va regresar la información de todos los archivos.Notemos que en la última fila tenemos los totales de todos los archivos. Accedamos la ayuda del comando con help.Ejercicio: ¿Cuál opción nos permite extraer solo la cantidad de líneas del archivo?Si por error olvidamos colocar el nombre del archivo o cualquier otra cosa después del comando, la consola se quedará esperando una instrucción, para salir de esto basta presionar Ctrl+C.Ya sabemos como extraer cierta información de nuestros archivos, pero supongamos que queremos guardarlo ahora en algún otro archivo para después analizarlo. El símbolo > redirige el resultado de los comandos usados algún archivo.Para solo visualizar el contenido de un archivo sin entrar al editor de texto, podemos usar el comando cat seguido del nombre del archivo.Otro comando que puede resultar más útil para mostrar el contenido de un archivo es less, la diferencia con cat es que este último muestra todo el contenido en la pantalla, lo cual puede dificultar su lectura e inspección, mientras que less muestra una parte del contenido y de forma ordenada, si queremos seguir viendo el contenido podemos usar la tecla de espacio, b y para salir usamos la letra q.Ya guardamos la información de la cantidad de líneas, pero supongamos que queremos saber cual archivo tiene la mayor cantidad de líneas o menor. Para hacer esto nos sirve el comando sort.Si sort le agregamos la opción -n, nos los ordena en numericamente en lugar de alfabeticamente.Ejercicio: De los archivos que están en la carpeta alkane, ¿cuál tiene la menor cantidad de líneas?También podemos redirigir esta información otro archivo y de ahí extraer la información.El comando head nos ayuda extraer las primeras n líneas de nuestro archivo. Por ejemplo, para extraer la primera línea del archivo lineas_ordenadas.txt y así saber cual archivo tenía la menor cantidad de líneas usaríamos head -n 1.El comando echo nos ayuda imprimir en la consola caracteres.Ejercicio: Realiza las siguientes instrucciones dos veces cada una. Explora las diferencias. ¿Qué hace el operador >>?El comando tail es similar al comando head, nos muestra las últimas n filas del archivo.Ejercicio: Considera el archivo /exercise-data/animal-counts/animals.csv. Después de aplicar los siguientes dos comandos, ¿qué hay en el archivo animals-subset.csv?","code":"$ lscubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb$ wc cubane.pdb20  156 1158 cubane.pdb$ wc *.pdb$ wc --help$ wc -l *.pdb$ wc -l *.pdb > lineas.txt$ cat lineas.txt$ cd ..\n$ sort numbers.txt$ sort -n numbers.txt$ sort -n lineas.txt > lineas_ordenadas.txt$ head -n 1 lineas_ordenadas.txt$ echo Hola$ echo hola > test1.txt$ echo hola >> test2.txt$ head -n 3 animals.csv > animals-subset.csv\n$ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"shell.html","id":"tuberías","chapter":"Sección 2 Shell","heading":"2.3.1 Tuberías","text":"Además de redirigir los output de los comandos que hemos ocupado, también podríamos anidarlos y al final mandarlo un archivo. Para hacer esto se usan tuberías y su símbolo es |. Por ejemplo:En esta instrucción le estamos diciendo la consola que primero nos ordene lo que hay en el archivo líneas en orden númerico y después que nos muestre la primera línea. De esta forma nos evitamos por ejemplo el haber creado el archivo lineas_ordenadas.txt.Podemos anidar varias instrucciones la vez. Por ejemplo, podríamos pedirle la consola la cantidad de líneas de los archivos *.pdb, pedirle que las ordene numericamente y después que extraiga la primera línea.Ejercicio: De los archivos que están en la carpeta alkanes, obten los 3 archivos con la menor cantidad de líneas.Ejercicio: Explora el archivo exercise-data/animals-counts/animals.csv. ¿Cuál será el resultado de la siguiente instrucción?El comando cut nos ayuda extrar/cortar ciertas columnas de nuestros archivos. Por ejemplo, cut -d , -f 2 archivo nos está indicando que del archivo queremos cortar por caracteres , (eso hace -d ,) y que queremos extraer la segunda columna (-f 2).Si quisieramos extraer los animales únicos de ese archivo, podemos usar el comando uniq.También se puede colocar por ejemplo -f 2-5,8 para indicar que se deben seleccionar las columnas 2 la 5 y la 8.Ejercicio: ¿Porqué se necesita colocar el sort antes del uniq?Ejercicio: Si quisiéramos ver cuantos animales hay de cada tipo, ¿que instrucción tendríamos que usar?","code":"$ sort -n lineas.txt | head -n 1$ wc -l *.pdb | sort -n | head -n 1$ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt$ cut -d , -f 2 animals.csv$ cut -d , -f 2 animals.csv | sort | uniq"},{"path":"shell.html","id":"ciclos","chapter":"Sección 2 Shell","heading":"2.4 Ciclos","text":"Los ciclos nos ayudan repetir comandos o un conjunto de comandos para cada elemento de una lista. La estructura del ciclo es como sigue:La palabra indica el comienzo del ciclo, la palabra nos indica que es lo que se va ejecutar y su comienzo y la palabra done indica el fin del ciclo.Exploremos lo que hay en la carpeta ~/Shell/shell-lesson-data/exercise-data/creatures. Listemos las primeras 5 filas de cada archivo.Supongamos que queremos ver la clasificación de cada especie que se encuentra en la segunda línea de cada archivo. Una forma de hacerlo es con head -n 2, pero de esta forma también estamos viendo su nombre común, entonces vamos hacerlo con un ciclo. Lo primero que tendríamos que hacer es usar justo head -n 2 y al resultado de esto, si le pedimos la última línea ya solo veríamos la clasificación, entonces usamos un tail -n 1.Notemos que cuando empezamos teclear nuestro ciclo, el prompt cambia de $ >, esto indica que está esperando que continuemos el ciclo. También podemos usar ; para continuar las instrucciones en una misma fila.Dentro de los ciclos, las variables las mandamos llamar con $, en el ejemplo, cuando ocupamos $filename estamos mandando llamar la variable filename que definimos al inicio del ciclo. Es muy usual también encerrar entre llaves los nombres de las variables para delimitar el nombre, en el ejemplo, $filename sería equivalente ${filename}.Ejercicio: Crea un ciclo que muestre en pantalla (echo) todos los números del 0 al 9.Ejercicio: Ve la carpeta shell-lesson-data/exercise-data/alkanes y lista lo que hay.\n1) ¿Cuál es el output del siguiente código?¿Y de este código?Explica las diferencias.Ejercicio: En el directorio shell-lesson-data/exercise-data/alkanes, ¿cuál sería el output del siguiente código?Y si en lugar de c* usamos c?Dentro de un ciclo también podemos pedir guardar archivos.Ejercicio: Explora el siguiente código. ¿Cuál es el efecto de guardar en este ciclo?¿Cuál sería la diferencia si usamos ahora >>?Ejercicio: Crea un ciclo que muestre las últimas 20 líneas de cada archivo en la carpeta creatures.Como ya mencionamos, es recomendable usar espacios ni caracteres especiales en nombres de archivos o carpetas. Si fuera el caso de que nuestros archivos tienen espacios, entonces deberíamos pasarlos al ciclo encerrados entre comillas los nombres. Por ejemplo, supongamos que tenemos los archivos archivo 1.txt y archivo 2.txt. Para leerlos en el ciclo tendríamos que usar la siguiente sintaxis.Supongamos que queremos modificar nuestros archivos que se encuentran en la carpeta creatures pero que antes queremos respaldarlos en otros archivos llamados original-basilisk.dat, original-unicorn.dat y original-minotaur.dat. Una forma de hacerlo sería copiarlos nuevos archivos con esos nombres, pero si lo queremos hacer manualmente, ¿qué pasa si usamos el siguiente código?Esto nos va dar un error porque el comando cp estaría esperando que original- sea una carpeta y lo es, existe esa carpeta. Entonces lo que podemos hacer es usar un ciclo.Ejercicio: Crea un ciclo que copie los dos archivos dos nuevos archivos llamados original-basilisk.dat, original-unicorn.dat y original-minotaur.dat.El comando cp nos muestra en pantalla ningún output. Si quisieramos ver que en efecto se esta realizando la copia de estos archivos podemos usar el comando echo y pedir que nos diga como “se copio el archivo $filename”. Usar echo de esta forma es una buena práctica de realizar lo que se llama debugging.Ejercicio: Supongamos que queremos previsualizar los comandos que el siguiente ciclo va realizar en lugar de correrlo primero para asegurarnos de que está haciendo lo que queremos.¿Cuál de los siguientes dos códigos sería el correcto para revisar los comando ejecutarse con el ciclo?Corre los dos códigos y explora el contenido del archivo .pdb.Supongamos que queremos crear una estructura de directorios como sigue, para cada compuesto y cada temperatura queremos una carpeta para ir guardando ahí sus resultados, y que cada carpeta se llame compuesto-temperatura, ¿cómo podemos hacer esto? Una opción son los ciclos anidados.Algunos comandos útiles para ver el historial de comadnos.history nos muestra el historial de comandos.history nos muestra el historial de comandos.Ctrl+R nos muestra la leyenda reverse--search, esto indica que está esperando que nosotros coloquemos una palabra y buscará por el último comando con esa palabra.Ctrl+R nos muestra la leyenda reverse--search, esto indica que está esperando que nosotros coloquemos una palabra y buscará por el último comando con esa palabra.history + !123 nos repetirá el comando !123 del historial.history + !123 nos repetirá el comando !123 del historial.!! nos muestra el último comando usado.!! nos muestra el último comando usado.!$ nos regresa la última palabra del último comando.!$ nos regresa la última palabra del último comando.Ejercicio: En la carpeta norht-pacific-gyre se encuentran dos scripts (.sh) y una lista de archivos. Esta lista de archivos tiene terminaciones , B y en el caso de que la terminación sea Z significa que el archivo está corrupto.¿Cómo podrías darte cuenta que los archivos con terminación Z están corruptos?Supongamos que queremos ejecutar el script llamado goostats.sh, este script necesita recibir dos cosas, el archivo de entrada y el nombre del archivo de salida. Supongamos que queremos correr este script para todos los archivos con terminación y B y que queremos que los archivos de salida se llamen stats-$datafile.Crea un ciclo que te muestre en pantalla el nombre del archivo usar como input.Crea un ciclo que te muestre en pantalla el nombre del archivo usar como input.Crea un ciclo que te muestre en pantalla el nombre del archivo de salida con el formato indicado. Pero quieres asegurarte que para el archivo input sea el nombre correcto el del archivo de salida.Crea un ciclo que te muestre en pantalla el nombre del archivo de salida con el formato indicado. Pero quieres asegurarte que para el archivo input sea el nombre correcto el del archivo de salida.Crea un ciclo que muestre los comandos usarse para correr el script con los archivos de entrada y de salida del paso 2 y 3. Para correr un script como se indica, se usa el comando bash nombre_archivo.sh input output.Crea un ciclo que muestre los comandos usarse para correr el script con los archivos de entrada y de salida del paso 2 y 3. Para correr un script como se indica, se usa el comando bash nombre_archivo.sh input output.Agrega un echo $datafile para saber en que archivo va tu ciclo.Agrega un echo $datafile para saber en que archivo va tu ciclo.","code":"for elemento in lista\ndo \n  operacion/comando $elemento\ndone$ head -n 5 basilisk.dat minotaur.dat unicorn.dat$ for filename in *.dat\n> do\n>   echo $filename\n>   head -n 2 $filename | tail -n 1\n> done$ for datafile in *.pdb\n> do\n>     ls *.pdb\n> done$ for datafile in *.odb\n> do \n>     ls $datafile\n> done$ for filename in c*\n> do\n>     ls $filename\n> done$ for alkanes in *.pdb\n> do\n>     echo $alkanes\n>     cat $alkanes > alkanes.pdb\n> done$ for filename in \"archivo 1.txt\" \"archivo 2.txt\"\n> do\n>     head -n20 \"$filename\" | tail -n5 \n> done$ cp *.dat original-*.dat$ for filename in *.dat\n> do\n>     echo cp $filename original-$filename\n> done$ for filename in *.pdb\n> do\n>     cat $filename >> all.pdb\n> done# Versión 1\n$ for filename in *.pdb\n> do\n>     echo cat $filename >> all.pdb\n> done# Versión 2\n$ for filename in *.pdb\n> do\n>    echo \"cat $filename >> all.pdb\"\n> done$ for species in cubane ethane methane \n> do\n>     for temperature in 25 30 37 40\n>     do\n>         mkdir $species-$temperature\n>     done\n> done"},{"path":"shell.html","id":"scripts","chapter":"Sección 2 Shell","heading":"2.5 Scripts","text":"Los scripts nos ayudan repetir los comandos sobre listas de archivos. Supongamos que existen ciertos comando que siempre repetimos, vamos guardarlos en un archivo para con un solo comando ejecutar esa lista de comandos.Vamos al directorio alkanes. Supongamos que siempre queremos extraer las líneas de la 11 la 15 de cada archivo. Por ejemplo, una forma en la que lo hacemos es:Vamos escribir eso en un archivo:Guardemos eso. Para ejecutarlo bastaría correr lo siguiente:Supongamos que queremos las líneas de la 11 la 15 pero de cualquier otro archivo. Vamos modificar el archivo que creamos.En el script, cuando colocamos \"$1\" se refiere al primer argumento/archivo en la línea de comandos, por ejemplo cuando colocamos en la línea de comandos:Lo que estamos diciéndole la consola es que reemplace dentro del script “$1” por el archivo octane.pdb. De esta forma nuestro script ahora lo podemos correr sobre cualquier archivo.Nuestro script por el momento funciona solo con las líneas de la 11 la 15. Supongamos que queremos modificar esto de tal forma que cuando vayamos ejecutar el script le indiquemos las líneas que queremos extraer. Así como usamos $1 para indicarle que era la primera variable en la línea de comandos, podemos usar las variables $2 y $3 para indicarle la segunda y tercera variable.Entonces podemos ejecutar el script como sigue:Y podemos cambiar las líneas mostrar, por ejemplo:Lo único que falta en el script, es describir que hace, de esta forma cualquier otra persona (o nosotros más adelante), cuando queramos abrir el script podamos recordar y entender que argumentos pide y cual es su uso.Ahora, supongamos que queremos ordenar los archivos .pdb por cantidad de líneas. Sin un script eso lo hacemos así:Si queremos poner esto en un script pero queremos correrlo sobre varios tipos de archivos, digamos los .pdb y los .dat, podemos colocar en nuestro script *.pdb, y si usamos como en los ejemplos anteriores \"$1\" o \"$2, eso limitaría la cantidad de archivos que podemos pasarle después en la consola. Una forma de depender de eso es con la variable $@, esto indica que pueden ser cualquier cantidad de argumentos en la línea de comandos.Ejercicio: El archivo animals.csv ya vimos que es un archivo separado por comas que indica las especies y la cantidad de cada uno. Crea un script que se pueda aplicar cualquier cantidad de archivos con ese formato y que te diga las especies únicas de cada archivo.\nCrea 3 archivos similares al animals.csv (copia y modifica) y prueba tu script.Ejercicio: Corre el siguiente comando:¿Qué contiene ese archivo? ¿Observa la última línea del archivo? ¿Porqué guarda esa línea?Ejercicio: En la carpeta alkanes supongamos que tenemos un script.sh que contiene lo siguiente:Dentro del directorio alkanes, corre lo siguiente:¿Qué esperas obtener?Ejercicio: Crea un script llamado longest.sh que reciba como argumentos un directorio y una extensión de archivos y que te devuelva el archivo en el directorio, que tenga esa extensión, con el mayor número de líneas.Ejercicio: Considera los archivos que están en la carpeta alkanes. Explica que hace cada uno de los siguientes scripts al correrlos como bash script1.sh *.pdb, bash script2.sh *.pdb y bash script3.sh *.pdb.Ejercicio: (Debugging) Supongamos que tienen el siguiente script -errors.sh en la carpeta north-pacific-gyre:Corre en la línea de comandos:muestra ninguna salida. Para ver porque, vamos correrlo de nuevo con la opción -x:¿Cuál es el output? ¿Cuál es la línea responsable del error?Otra asignación de variables es #@, esto nos indica cuantos objetos hay de la variable.Tres conceptos usados en bash son los siguientes:STDIN: estándar inputSTDIN: estándar inputSTDOUT: estándar outputSTDOUT: estándar outputSTDERR: estándar errorSTDERR: estándar errorPara redirigir el error y el output automáticamente archivos, usamos las opciones:O dentro de un script:Al inicio de un script se suele colocar #!/usr/bash para que el interprete sepa que es un script de bash y use el bash que se encuentra en usr/bash. Si está ahí se coloca la ruta correspondiente, para saber donde está usamos bash.","code":"$ head -n 15 octane.pdb | tail -n 5$ cd alkanes\n$ nano middle.sh$ bash middle.sh$ nano middle.shhead -n 15 \"$1\" | tail -n 5$ bash middle.sh octane.pdb$ nano middle.shhead -n \"$2\" \"$1\" | tail -n \"$3\"$ bash middle.sh octane.pdb 15 5$ bash middle.sh octane.pdb 20 5$ nano middle.sh# Selecciona líneas intermedias de un archivo.\n# Uso: bash middle.sh nombre_archivo linea_final linea_inicial\nhead -n \"$2\" \"$1\" | tail -n \"$3\"$ wc -l *.pdb | sort -n $ nano sorted.sh# Ordena archivos por su longitud\n# Uso: bash sorted.sh uno_o_mas_archivos\nwc -l \"$@\" | sort -n$ bash sorted.sh *.pdb ../creatures/*.dat$ history | tail -n 5 > recientes.sh$ head -n $2 $1\n$ tail -n $3 $1$ bash script.sh '*.pdb' 1 1# Script 1\necho *.*# Script 2\nfor filename in $1 $2 $3\ndo\n  cat $filename\ndone# Script 3\necho $@.pdb# Calcular estadisticas para los archivos\nfor datafile in \"$@\"\ndo\n  echo $datafile\n  bash goostats.sh $datfile stats-$datafile\ndone$ bash do-errors.sh NENE*A.txt NENE*B.txt$ bash -x do-errors.sh NENE*A.txt NENE*B.txt$ 2> error.txt & 1> output.txtexec 1>> output.txt 2>> error.txt"},{"path":"shell.html","id":"buscando-y-encontrando-cosas","chapter":"Sección 2 Shell","heading":"2.6 Buscando y encontrando cosas","text":"La función grep (global/regular expression/print) nos ayuda encontrar e imprimir líneas de archivos que contengan un patrón especificado.Vamos la ruta excercise-data/writing.Para buscar las líneas que contienen la palabra , la instrucción sería la siguiente:El comando grep es sensible mayúsculas y minúsculas. Si buscáramos por ejemplo nos encontraría ninguna coincidencia.Observemos que ahora nos está regresando una palabra que contiene en su estructura: Thesis. Para restringir que solo sean coincidencias exactas, usamos la bandera -w.En el caso de querer buscar frases, debemos encerrarlas entre comillas.Si agregamos la opción -n, esto nos mostrará también la línea en la que se encuentra la coincidencia.Las banderas se pueden combinar, por ejemplo -nw (-wn o -n -w) nos buscaría coincidencias exactas y los números de líneas.Para que nos importe mayúsculas o minúsculas, usamos la opción -.La opción -v es para invertir nuestra búsqueda, es decir para mostrarnos las líneas que contienen esa palabra/frase.La opción -r busca recursivamente por la coincidencia en un conjunto de archivos indicados.Ejercicio: ¿Cómo obtendrían solo lo siguiente del archivo haiku.txt?Dentro del comando grep también podemos usar comodines (expresiones regulares), por ejemplo:El ^ se refiere al inicio de la línea, el . se refiere un carácter (análogo ?), entonces estaría buscando todas las líneas una palabra donde su segunda letra sea la letra o.Ejercicio: El archivo que se encuentra en la carpeta animal-counts/animals.csv contiene una lista de animales, con su fecha de observación y cuantos animales se observaron.Supongamos que queremos crear un script que tome como primer argumento la especie del animal y como segundo argumento el directorio. El script nos debe regresar un archivo llamado <especie>.txt que contenga una lista de fechas y el número de veces que se observo esa especie. Por ejemplo, rabbit.txt tendría que contener la siguiente información:Usa las opciones de ayuda de los comandos cut y grep (puedes usar man grep o man cut también para pedir ayuda de esos comandos, la palabra man se refiere manual.)Ejercicio: En la carpeta exercise-data/writing se encuentra el texto completo de Mujercitas LittleWomen.txt. Usando un encuentra que hermana aparece más veces: Jo, Meg, Beth, Amy.solo podemos buscar una sola palabra, podríamos buscar dos palabras o buscar entre dos palabras:Ejercicio: ¿Cómo podrías mostrar en color lo que estás buscando? Explora la ayuda de grep.Para buscar entre directorios, usamos el comando find. Por ejemplo, el siguiente comando nos encontrará todo lo que este en directorio actualLa opción -type d nos mostrará solo carpetas.Y con la opción -type f nos mostrará todos los archivos.Si queremos encontrar algo que concuerde con algún nombre:Hay que tener cuidado con esta instrucción, find expande los comodines antes de correr los comandos, en el caso de tener más de un archivo veremos un mensaje de error. Para prevenir esto y que si busque todos los archivos, debemos encerrar el patrón entre comillas.Podemos hacer tuberías también con este comando, por ejemplo si quisieramos contar cuantas líneas tienen todos los archivos con terminación txt, podríamos hacer lo siguiente:Otro ejemplo:Ejercicio: La opción -v en grep busca todo lo que concuerde con el patrón indicado. En la carpeta creatures, ¿cómo listarías todos los archivos que terminen en .dat menos el que se llama unicorn?","code":"$ cat haiku.txt$ grep not haiku.txt$ grep The haiku.txt$ grep -w The haiuku.txt$ grep -w \"is not\" haiku.txt$ grep -n \"it\" haiku.txt$ grep -nw \"it\" haiku.txt$ grep -n -w -i \"the\" haiku.txt$ grep -n -w -v \"the\" haiku.txt$ grep -r Yesterday .and the presence of absence.$ grep -E \"^.o\" haiku.txt2012-11-05,deer,5\n2012-11-05,rabbit,22\n2012-11-05,raccoon,7\n2012-11-06,rabbit,19\n2012-11-06,deer,2\n2012-11-06,fox,4\n2012-11-07,rabbit,16\n2012-11-07,bear,12012-11-05,22\n2012-11-06,19\n2012-11-07,16$ grep -E \"cadena1|cadena2\" archivo$ find .$ find -type -d$ find . -name *.csv$ find . -name \"*.txt\"$ wc -l $(find . -name \"*.txt\")$ grep \"searching\" $(find . -name \"*.txt\")"},{"path":"shell.html","id":"if-while-y-for","chapter":"Sección 2 Shell","heading":"2.7 if, while y for","text":"Ya vimos que la sintaxis del ciclo es como sigue:Una forma de crear una lista es como sigue:Usando esta sintaxis, el código para listar todos los números del uno al 9 quedaría:Otra forma de escribir la lista sería con la sintaxis ((x=1;x<=9;x+=1)).La estructura del ciclo es como sigue:También se puede usar la estructura ((condicion)).Los operadores aritméticos en el condicional que se pueden usar son los siguientes:\\(>\\), \\(<\\), \\(==\\), \\(!=\\)\\(>\\), \\(<\\), \\(==\\), \\(!=\\)-eq, -ne: igual y igual (equal , equal ).-eq, -ne: igual y igual (equal , equal ).-lt, -le: para menor que o menor o igual que (less ,less equal ).-lt, -le: para menor que o menor o igual que (less ,less equal ).-gt, -ge: para mayor que o mayor o igual que (greater , greater equal ).-gt, -ge: para mayor que o mayor o igual que (greater , greater equal ).Otros banderas para los condicionales las pueden encontrar en el siguiente link.La notación && es para un Y y la notación || para un O, las cuales nos sirven para verificar más de una condición:También podemos usar la siguiente estructura: [[ $x -gt 5 && $x -lt 10]].Dentro de un podemos pedir que nos busque en algún archivo combinandolo con grep, dentro de la carpeta animal-count:El mismo resultado lo podemos obtener como sigue:El ciclo tiene la misma estructura del ciclo y los operadores aritméticos son los mismos que en el . Siempre recuerden poner un fin al ciclo para que sea infinito.Aparte de estos ciclos, existen los CASE Statements, los cuales pueden llegar ser más útiles que los cuando se tienen condiciones muy complicadas. Su estructura es la siguiente:Por ejemplo:Si corremos este script en la terminal con bash case_ejemplo.sh veremos que dependiendo de la frase que coloquemos en la terminal, nos arrojará una de las opciones.Ejercicio: Crea un case statement para adivinar tu edad. Debes pedirle al usuario que introduzca el número correspondiente tu edad y que los casos o patrones obtengan por resultado una frase referente si adivinaron o su edad. Realiza lo mismo con un .","code":"$ for file in list\n> do\n>     comands\n> done$ {start..stop..increment}$ for numero in {1..9..1}\n> do\n>     echo $numero\n> done$ if [ condicion ]; then\n>     code\n> else\n>     other code\n> fi$ x=10\n$ if [ $x -gt 5 ]; then\n>     echo \"$x es mayor que 5\"\n> fi$ x=8\n$ if [ $x -gt 5 ] && [ $x -lt 10]; then\n>     echo \"$x es mayor que 5 y menor que 10\"\n> fi$ if grep -q \"rabbit\" animals.csv; then\n>     echo \"Rabbit esta en el archivo\"\n> fi$ if $(grep -q \"rabbit\" animals.csv); then\n>     echo \"rabbit esta en el archivo\"\n> fi$ x=1\n$ while [ $x -le 5 ];\n> do\n>     echo $x\n>     ((x+=1))\n> done$ case 'String' in\n>     patron1)\n>     comando1;;\n>     patron2)\n>     comando2;;\n>     *)\n>     comando por default;;\n> esac#!/bin/bash\n#Control de flujo: case\necho \"Escribe una frase\"\nread frase\ncase $frase in\n  a*)\n    echo \"La frase empieza con a\"\n  ;;\n  c*t)\n    echo \"La frase empieza con c y termina con t\"\n  ;;\n  *com)\n    echo \"La frase termina con la cadena com\"\n  ;;\n  *)\n    echo \"La frase no cumple con ninguna de las condiciones\"\n  ;;\nesac"},{"path":"shell.html","id":"descarga-y-limpieza-de-bases-de-datos","chapter":"Sección 2 Shell","heading":"2.8 Descarga y limpieza de bases de datos","text":"Pendiente: Se verá después de SQL.","code":""},{"path":"git-y-github.html","id":"git-y-github","chapter":"Sección 3 Git y Github","heading":"Sección 3 Git y Github","text":"Usar control de versiones es una forma de manejar proyectos, todo lo que se hace commit se pierde, se queda un registro de todos los cambios y siempre es posible regresar una versión anterior. Nos evitamos estar enviando y enviando correos con versiones finales para después comparar versiones. Se guarda el usuario que hizo el cambio y automáticamente obtenemos una notificación de si intentamos modificar lo mismo que un colaborador para revisar cual cambio guardar.Pueden pensar en versión de control como una forma de undo ilimitado y de trabajar paralelamente con sus colaboradores.Lo primero que vamos hacer es configurar Git en nuestra computadora.Vamos abrir Git bash y configurar nuestro usuario y correo con la que vamos enlazar más adelante Github.Ahora, vamos configurar los saltos de línea para tener conflicto según el sistema operativo.Para configurar el editor de texto por default:Por default, Git inicializa un repositorio con una rama llamada master, partir del 2020, la mayoría de los servidores de Git cambiaron esto que la rama principal fuera main, para configurar esto usaremos lo siguiente:Los comandos anteriores solo se necesitan configurar una sola vez. Para ver la configuración que acabamos de realizar y probar cual es nuestro editor de texto usamos lo siguiente:Y para revisar esta configuración sin entrar al editor:Si debieran hacer cambios en su usuario o correo o cualquier otra configuración lo pueden hacer ilimitadas veces con los comandos anteriores.Para pedir ayuda nos sirve aún git comando -h o git comando --help, por ejemplo:O para ayuda general de Git: git help.","code":"$ git config --global user.name \"Usuario\"\n$ git config --global user.email \"email@domain.com\"# Mac o Linux\n$ git config --global core.autocrlf input\n# Windows\n$ git config --global core.autocrlf true$ git config --global core.editor \"nano -w\"$ git config --global init.defaultBranch main$ git config --global --edit$ git config --list$ git config -h\n# La siguiente nos abre en un navegador el manual completo\n$ git config --help"},{"path":"git-y-github.html","id":"repositorios","chapter":"Sección 3 Git y Github","heading":"3.1 Repositorios","text":"Un repositorio es donde se va almacenar toda la información de nuestro proyecto, es donde vamos tener toda la historia y registro de cambios y usuarios. Es recomendable tener un repositorio por proyecto y multiples proyectos en un solo repositorio.Vamos movernos la carpeta del curso y vamos hacer una carpeta para trabajar con git.Para inicializar un repositorio usamos lo siguiente (dentro de la carperta).Al inicializar el repositorio, cualquier carpeta y archivo que se cree dentro de la carpeta quedará su registro, es necesario inicializar las carpetas anidadas.Si revisamos que tiene la carpeta solo con ls vamos notar ningún cambio pero si listamos con la opción -veremos que contiene archivos ocultos. En el archivo .git se almacena TODA la información de nuestro repositorio, así que si lo borramos perderemos todo el historial del repositorio.Para cambiar manualmente la rama de nuestro repositorio si es la main, lo podemos hacer como sigue.Para preguntarle git el estado de nuestro proyecto:Si dentro de una carpeta preguntamos git status y obtenemos el siguiente mensaje:significa que si podemos inicializarlo como un repositorio.Ejercicio: Dentro de la carpeta Mi_primer_repo crea una carpeta llamada subproyecto1. Si quieres llevar un registro de lo que hagas en ese subproyecto, ¿debes inicializarla? Inicializala. Ahora, ¿cómo borras el archivo .git?","code":"$ cd Curso_Comp_cient\n$ mkdir Mi_primer_repo\n$ cd Mi_primer_repo$ git init$ ls -a$ git checkout -b main$ git statusfatal: not a git repository (or any of the parent directories): .git"},{"path":"git-y-github.html","id":"rastrear-cambios","chapter":"Sección 3 Git y Github","heading":"3.2 Rastrear cambios","text":"Vamos crear un archivo de texto dentro de la carpeta Mi_primer_repo.Y escribamos algo en el archivo y guardemoslo.Ahora, si preguntamos por el estado de nuestro proyecto vamos obtener un mensaje de que hay algo nuevo:El mensaje que dice untracked files nos indica que hay cambios y que Git se le ha indicado que debe registrarlos. Para añadir estos cambios hacemos lo siguiente:Si revisamos el estado del proyecto vemos que ahora un mensaje diferente, ahora solo nos indica que se ha realizado ningún commit pero que si se tiene registro de algo que cambio.Para hacer un commit:Este comando le dice Git que tome todo lo que se añadió y que guarde una copia permanente dentro del directorio .git. Cada commit tiene un identificador único. Si especificamos el mensaje, Git abrirá un editor de texto para colocar el mensaje. Los mensajes deben de reflejar lo que se está guardando para que sean útiles en el futuro.Si ahora verificamos el estado del proyecto veremos que nos dice que hay nada lo que hacer commit ya que en el paso anterior añadimos todo y hemos realizado ningún cambio.Para mostrar el historial del proyecto:Ahora, añadamos una línea nueva al archivo prueba.txtSi revisamos el estado veremos de nuevo que nos devuelve el mensaje de que hay archivos sin rastrear. Para comparar las diferencias del archivo usamos:El signo + nos está indicando cuales son los cambios en el archivo nuevo.Vamos hacer un commit de este cambio.¿Qué paso? Nos esta diciendo que hemos añadido nada al staged area lo que le podamos hacer un commit, recuerden añadir todo antes de hacer commit.Añadir todo primero al área de preparación nos permite tener un mejor control de que le estamos haciendo commit, por ejemplo podemos añadir y hacerle commit solo al archivo donde tenemos la bibliografía y todo el proyecto donde hay partes completas.Ejercicio: Añadamos una tercera línea al archivo y verifiquemos las diferencias en los archivos, después añadamoslo al área de preparación y revicemos las diferencias. ¿Qué sucede?Al añadirlo al área de preparación lo estamos añadiendo permanentemente, entonces hay ninguna diferencia. Si queremos las diferencias con lo último lo que se le hizo commit podemos hacer lo siguiente:Ahora hagamos el commit.Si revisamos el historial, veremos ahora 3 commit diferentes:Cuando el historial es muy grande nos va mostrar todo el historial nuestra terminal, para ir avanzando debemos presionar Spacebar y para salir la letra Q. Al presionar / se puede buscar alguna palabra en los mensajes de los commits. Para limitar la cantidad de información que nos regresa log podemos especificar con la opción -n la cantidad de commits desde el más reciente. Para ver por ejemplo el último utilizariamos lo siguiente:Si queremos ver los mensajes en una sola línea usamos:Git guarda información de directorios vacíos. Por ejemplo:Si creamos un directorio con archivos, entonces si podemos añadir todos los archivos la vez y si quedará el registro del directorio también.En algunas ocasiones verán directorios vacíos con un archivo .gitkeep, este archivo es solo para que podamos añadir el repo Git.Ejercicio: Crea un archivo mi_archivo.txt, escribe algo en el y guárdalo en la ruta Mi_primer_repo. Añádelo la historia de tu repo. ¿Cuáles son los pasos que debes realizar?Ejercicio: Modifica el archivo prueba.txt añadiéndole una línea, ahora en el archivo mi_archivo.txt agrega algo y guárdalo. ¿Cómo añadirías los dos archivos al staging área? Añádelos y realiza el commit correspondiente.Ejercicio: Crea un repositorio llamado bio. Escribe en un archivo llamado .txt tres líneas de tu biografía, un commit con tus cambios. Modifica una línea y agrega una cuarta línea. Muestra las diferencias entre el archivo en el staging área y el actual.","code":"$ nano prueba.txtPrimer archivo en el que rastrearemos cambios.$ git status$ git add prueba.txt$ git status$ git commit -m \"Comenzando archivo de prueba y registro de cambios\"$ git status$ git log$ nano prueba.txtPrimer archivo en el que rastrearemos cambios.\nSegunda línea de cambios para continuar con el ejemplo.$ git diff$ git commit -m \"Añadimos la segunda linea al archivo\"$ git add prueba.txt\n$ git commit -m \"Añadimos la segunda linea al archivo\"$ nano prueba.txt\n$ git diff\n$ git add prueba.txt\n$ git diff$ git diff --staged$ git commit -m \"Tercera línea para probar que pasa cuando se añade al área de preparación\"$ git log$ git log -1$ git log --oneline$ mkdir dic_prueba\n$ git status\n$ git add dic_prueba\n$ git status$ git touch dic_prueba/prueba1.txt dic_prueba/prueba2.txt dic_prueba/prueba3.txt\n$ git status\n$ git add dic_prueba\n$ git status\n$ git commit -m \"Ejemplo de como realizar un registro de directorios con archivos\""},{"path":"git-y-github.html","id":"explorando-el-historial","chapter":"Sección 3 Git y Github","heading":"3.3 Explorando el historial","text":"los commits nos podemos referir ellos con sus identificadores. Al último commit también nos podemos referir como HEAD. Añadamos una línea más al archivo prueba.txt.Ahora, para ver el último cambio con el último commit:Si quitamos el HEAD de esa última instrucción veremos lo mismo. Pero si colocamos un ~numero vamos ver que nos estamos refiriendo al commit anterior número n. Con git show vamos ver los cambios con respecto un commit anterior.También podemos referirnos los commit por su identificador de números y letras enorme o por los primeros 7 números o letras:Revisemos el estado:Con la siguiente instrucción podemos regresar las cosas como estaban antes de hacer el último cambio.O podríamos usar uno de los identificadores de commits:Y para regresarlo al último commit de nuevo:El comando git checkout revierte los archivos alguna versión anterior siempre que lo hayamos añadido al staging área. Para revertir un commit usamos la instrucción git revert [ID commit]. Supongamos que tenemos un error en el archivo prueba.txt y que ya hicimos commit y queremos revertir al último cambio. Los pasos que haríamos serían los siguientes:git log para identificar el ID del commit.git log para identificar el ID del commit.Copiar el ID del commitCopiar el ID del commitgit revert [ID del commit] para revertir ese cambio.git revert [ID del commit] para revertir ese cambio.Teclear el nuevo mensaje de commit.Teclear el nuevo mensaje de commit.Guardar y cerrarGuardar y cerrarSi ya añadimos los cambios al área de preparación, ya podemos usar git checkout simplemente.Ejercicio: Realiza las siguientes instrucciones:Crea una carpeta llamada learn_revert.Crea una carpeta llamada learn_revert.Muévete la carpeta learn_revertMuévete la carpeta learn_revertInicializa el repositorio.Inicializa el repositorio.Crea un archivo llamado first.txt y añade una línea de texto.Crea un archivo llamado first.txt y añade una línea de texto.Agrégalo al área de preparación y realiza el primer commit.Agrégalo al área de preparación y realiza el primer commit.Crea el archivo wrong.txt y agrega una línea de texto.Crea el archivo wrong.txt y agrega una línea de texto.Agrégalo al área de preparación y realiza un commit.Agrégalo al área de preparación y realiza un commit.Agrega una segunda línea de texto al archivo first.txt, guárdalo, agrégalo al área de preparación y realiza un commit.Agrega una segunda línea de texto al archivo first.txt, guárdalo, agrégalo al área de preparación y realiza un commit.Agrega una tercera línea de texto al archivo first.txt, guárdalo, agrégalo al área de preparación y realiza un commit.Agrega una tercera línea de texto al archivo first.txt, guárdalo, agrégalo al área de preparación y realiza un commit.Queremos deshacer el commit realizado cuando se añadió el archivo wrong.txt. Como este commit fue el segundo de donde estamos, podemos usar git revert HEAD~2 (o podemos usar git log y encontrar el ID de ese commit).Queremos deshacer el commit realizado cuando se añadió el archivo wrong.txt. Como este commit fue el segundo de donde estamos, podemos usar git revert HEAD~2 (o podemos usar git log y encontrar el ID de ese commit).¿Está el archivo wrong.txt? ¿Qué sucede con el historial de commits?Otras opciones del historial del commit:Para ver tanto las diferencias entre los archivos y los ID de los commits. Se puede colocar solo el nombre de un archivo y solo mostrara los commit que afectaban ese archivo o si se coloca el nombre del archivo aplica sobre todo el historial de commits.Para mostrar las descripciones detalladas de las modificaciones y archivos.Para mostrar los nombres de los archivos afectados en cada commit.Para mostrar los archivos afectados en cada commit con la leyenda de si fueron modificados (M) o añadidos () o eliminados.Consultar el siguiente link para ver más opciones y ejemplos.","code":"$ nano prueba.txt\n$ cat prueba.txt$ git diff HEAD prueba.txt$ git diff HEAD~1 prueba.txt$ git show HEAD~1 prueba.txt$ git diff 451b2ad469b96e13547e13dc0e718613acdc987c prueba.txt\n$ git diff 451b2ad prueba.txt$ git status$ git checkout HEAD prueba.txt\n$ cat prueba.txt$ git checkout 451b2ad prueba.txt\n$ cat prueba.txt\n$ git status$ git checkout HEAD prueba.txt$ git log --patch prueba.txt$ git log -p$ git log --name-only$ git log --name-status"},{"path":"git-y-github.html","id":"restore-y-reset","chapter":"Sección 3 Git y Github","heading":"3.4 Restore y reset","text":"Otra forma de deshacer cambios es con restore y reset. Usualmente deshacer cambios se requiere para deshacer:Cambios antes de mandarlos al área de preparación.Cambios antes de mandarlos al área de preparación.Cambios que ya se mandaron al área de preparación.Cambios que ya se mandaron al área de preparación.CommitsCommitsSupongamos que hicimos un cambio en el archivo de prueba y lo guardamos y después decidimos que ya queremos ese cambio, entonces usamos la opción:Esto nos regresará la versión del archivo del último commit. Esto se puede deshacer, una vez echo esto hay forma de recuperar los cambios que se habían realizado.Ahora, supongamos que hicimos un cambio y lo mandamos al área de preparación, entonces para sacarlo de esa área usamos:También se pueden restaurar todos los archivos de un proyecto con:Para restaurar un commit anterior usamos el identificador del commit, por ejemplo:Si ahora revisamos el estado del proyecto veremos que si hay cambios.Agreguemos una línea al archivo prueba.txt y añadamos el cambio al área de preparación. Usen git checkout para ver si podemos revertir el cambio. Veamos que nos dice el estado git status. Si usamos git checkout -- prueba.txt ya veremos errores pero tampoco se restaurará el archivo.Para hacerlo debemos usar reset:Y si usamos ahora:Nos indica que ya podemos realizar la modificación con checkout:Con reset tenemos tres posibles situaciones.Situación 1: reset --soft HEAD~1: si realizamos un cambio en nuestro archivo y lo añadimos al área de preparación, al realizar el reset soft al commit HEAD~1 lo que estamos haciendo es como regresar un commit anterior pero sin perder los cambios que ya tenemos en el área de preparación, entonces lo que va resultar es que nuestro historial va cambiar de un commit anterior hasta el cambio que tenemos ahora. Con git status vemos que cambio nuestra área de preparación y después con git log podemos ver el cambio en el historial de commits.Situación 2: reset --mixed HEAD~1: si realizamos un cambio en nuestro archivo y lo añadimos al área de preparación, al realizar el reset mixed al commit HEAD~1 lo que estamos haciendo es como regresar nuestra área de preparación como estaba antes de ese commit, perdemos el cambio realizado en el archivo pero nuestro historial cambiará, pasará del commit anterior hasta el próximo commit que realicemos. Con git status vemos que nuestra área de preparación si cambio y con git log vemos que nuestro último commit desapareció.\n- Situación 3: reset --hard HEAD~1: si realizamos un cambio en nuestro archivo y lo añadimos al área de preparación, al realizar el reset hard al commit HEAD~1 lo que estamos haciendo es como regresar un commit anterior pero perdiendo los cambios que ya tenemos en el área de preparación y en nuestro archivo actual, entonces lo que va resultar es que estaríamos regresando hasta el commit anterior todo nuestro historial y partir de ahí comenzarían nuestros cambios.","code":"$ git restore prueba.txt$ git restore --staged prueba.txt$ git restore .$ git restore --source d3a9d6d prueba.txt$ git reset HEAD prueba.txt$ git status$ git checkout -- prueba.txt\n$ git status"},{"path":"git-y-github.html","id":"ignorar-archivoscarpetas","chapter":"Sección 3 Git y Github","heading":"3.5 Ignorar archivos/carpetas","text":"Es muy usual tener un archivo llamado .gitignore donde se pueden colocar los nombres de archivos o carpetas que queremos llevar registro.Creemos unos archivos de prueba.Si preguntamos el estado veremos los cambios registrados en el historial.Estos archivos por el momento nos sirven de nada y guardarlos o registrarlos sería una perdida de tiempo/espacio. Para ignorarlos, creamos el archivo .gitigno y añadimos los nombres ese archivo:Estos patrones le están diciendo Git que ignore todos los archivos .csv y todo lo que hay en la carpeta resultados, si después añadimos algo la carpeta lo seguirá ignorando. Y si alguno de esos archivos ya se le dijo Git que llevará su registro lo seguirá registrando.Si nos fijamos, el único documento que ahora nos menciona Git es el archivo .gitignore. Lo que nos falta es añadirlo y hacer el commit.El archivo .gitignore nos ayuda cometer el error de accidentalmente tratar de registrar y rastrear algo que se le dijo que lo hiciera.Si realmente queremos agregarlo, tendríamos que usar la opción -f:Para ver el estado de los archivos ignorados usamos la siguiente instrucción:Ejercicio: Supongamos que tenemos las siguientes subcarpetas:¿Qué tenemos que hacer si queremos ignorar solamente lo que hay en datos y lo que hay en plots?Para ignorar por ejemplo todos los archivos que terminan en .csv excepto uno en específico (b.csv) podemos indicarlo en el archivo .gitignore como:Ejercicio: Supongamos ahora que tenemos la siguiente estructura de carpetas:Y que queremos ignorar todo excepto lo que hay en datos. ¿Cómo lo harían?Ejemplo: Supongamos que tenemos la siguiente estructura de archivos:¿Cómo le indicas Git que ignore todos los csv de la carpeta rdatos menos el que se llama info.txt?Ejercicio: Supongamos que tenemos la siguiente estructura de datos:¿Cómo le indicamos Git que ignore todos los archivos .csv sin indicar manualmente todos los directorios?Ejercicio: Si en el archivo .gitignore escribimos lo siguiente, ¿qué está ignorando?","code":"$ cd Mi_primer_repo\n$ mkdir resultados\n$ touch a.csv b.csv c.csv resultados/a.out resultados/b.out$ git status$ nano .gitignore*.csv\nresultados/$ cat .gitignore$ git status$ git add .gitignore\n$ git commit -m \"Creamos el archivo gitignore e ignoramos todo lo que hay en resultados y archivos csv\"\n$ git status$ git add a.csv$ git add -f a.csv$ git status --ignoredresultados/plots\nresultados/datos*.csv  # ignoramos todos los csv\n!b.csv # exepto el que se llama b.csvresultados/plots\nresultados/datos\nresultados/img\nresultados/analisisresultados/rdatos/a.csv\nresultados/rdatos/b.csv\nresultados/rdatos/c.csv\nresultados/rdatos/info.txtresultados/a.csv\nresultados/analisis1/b.csv\nresultados/analisis2/c.csv\nresultados/analisis2/sub_1/d.csv*.csv\n!*.csv"},{"path":"git-y-github.html","id":"github","chapter":"Sección 3 Git y Github","heading":"3.6 Github","text":"El valor del control de versiones se hace evidente al comenzar colaborar con otros. Contamos con la mayor parte de las herramientas necesarias para ello; lo único que resta es transferir cambios de un repositorio otro.Sistemas como Git posibilitan el traslado de trabajo entre cualquier par de repositorios. obstante, en la práctica, resulta más conveniente utilizar una copia como punto central y mantenerla en la web en lugar de en la computadora portátil de alguien.Vamos comenzar por crear un repositorio remoto, pero para eso necesitamos configurar nuestra cuenta de Github también.","code":""},{"path":"git-y-github.html","id":"paso-1-crear-un-repositorio-remoto","chapter":"Sección 3 Git y Github","heading":"3.6.1 Paso 1: Crear un repositorio remoto","text":"Lo primero que vamos hacer es crear un repositorio remoto. Entra tu cuenta de Github y dale click en Nuevo.Ponle de nombre Mi_primer_repo (o el nombre que hayas usado en las secciones anteriores). Deja marcada la opción de público y añadas un README ni una licencia.Al darle click en crear repositorio, la página nos mostrará la siguiente información que es la que usaremos para configurar nuestro local con el remoto.","code":"$ mkdir Mi_primer_repo\n$ cd Mi_primer_repo\n$ git init"},{"path":"git-y-github.html","id":"paso-2-conectar-local-a-remoto","chapter":"Sección 3 Git y Github","heading":"3.6.2 Paso 2: Conectar local a remoto","text":"La página principal del repositorio remoto muestra una serie de información que necesitamos usar para conectar el repositorio remoto en Github con el repositorio local de nuestra computadora. Vamos usar el protocolo de conexión SSH, da click en donde dice SSH y continuación en el icono de copiar.Ahora, dentro de nuestra carpeta del repositorio local, abrir una terminal y correr lo siguiente:Para revisar que si se haya realizado correctamente procedemos usar lo siguiente:","code":"$ git remote add origin git@github.com:User/Mi_primer_repo.git$ git remote -v"},{"path":"git-y-github.html","id":"paso-3-conexión-mediante-ssh","chapter":"Sección 3 Git y Github","heading":"3.6.3 Paso 3: Conexión mediante SSH","text":"Primero verificamos si ya tenemos algún par de llaves:Si ya tienen algún par de llaves configuradas las van ver listadas, si tiene ninguna les saldrá una leyenda como la siguiente:","code":"$ ls -al ~/.sshls: cannot access '/c/Users/User/.ssh': No such file or directory"},{"path":"git-y-github.html","id":"paso-3.1-crear-un-par-de-llaves-ssh","chapter":"Sección 3 Git y Github","heading":"3.6.3.1 Paso 3.1: Crear un par de llaves SSH","text":"Para crear el par de llaves usamos el siguiente comando, la opción -t se refiere al tipo de algoritmo usado y la opción -C indica un comentario para la llave, en este caso el comentario es nuestro correo.Si tu sistema operativo lo permite, usa ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\".Como queremos usar el archivo default, solo damos Enter. Ahora nos pedirá una contraseña, tecleala, vas ver nada en la pantalla. Una vez creada verás en pantalla algo como lo siguiente:Lo que dice identification ser refiere la llave privada la cual debes compartir nunca y la cadena de caracteres que dice fingerprint se refiere parte de tu llave pública.Si repetimos el comando siguiente, verán ahora ya sus dos claves pública y privada.Ahora que ya tenemos las claves, debemos decirle GitHub cuales son.Copia la cadena de caracteres, ve la configuración de tu perfil de GitHub y da clic en “SSH GPG Keys”.Una vez ahí da clic en “Nueva llave SSH”.Después coloca un título que te permita identificar que será la clave con la que usarás la computadora y pega tu llave pública.Ahora solo falta revisar la conexión desde la terminal.Si vez un mensaje similar al siguiente, significa que quedo completa la autenticación.","code":"$ ssh-keygen -t ed25519 -C \"email@dominio.com\"Your identification has been saved in /c/Users/user/.ssh/id_ed25519\nYour public key has been saved in /c/Users/user/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA10KPxuYu94KpZg9AYjgt9g46A4kFy3g1o user@domain\nThe keys randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*= *.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|...   . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+$ ls -al ~/.ssh$ cat ~/.ssh/id_ed25519.pub$ ssh -T git@github.com$ Hi Name! Youve successfully authenticated, but GitHub does not provide shell access."},{"path":"git-y-github.html","id":"paso-4-push-and-pull","chapter":"Sección 3 Git y Github","heading":"3.6.4 Paso 4: Push and pull","text":"Una vez que ya tenemos configurado todo, solo falta enviar todo lo que tenemos en el repo local al remoto. Si se establecio la contraseña nos la va pedir en la terminal o una ventana aparte.En esa instrucción, origin se refiere al repositorio remoto y main al local (las ramas que estamos intentando poner en el mismo contenido).La situación en la que estamos es la siguiente:Para actualizar nuestro repositorio local, lo que debemos hacer es lo siguiente:Como hemos realizado ningún cambio en el remoto, veremos nada nuevo en el local. En el remoto también podemos añadir archivos directamente.Ejercicio: Añade un archivo nuevo desde el repositorio remoto y actualiza tus cambios en el local.","code":"$ git push origin main$ git pull origin main"},{"path":"git-y-github.html","id":"colaboradores","chapter":"Sección 3 Git y Github","heading":"3.7 Colaboradores","text":"Para esta parte, vamos trabajar en parejas (si es posible pueden abrir una segunda terminal para la realizar la parte de su equipo).Vamos ir nuestro repositorio que creamos en GitHub y vamos ir la configuración y después en donde dice colaboradores.Una vez en esa ventana, den clic en añadir colaboradores. Van buscar con el nombre de usuario de su compañero y dan enter.En su correo o cuenta de github, deben ir notificaciones y aceptar la invitación. También pueden usar el link.Ahora, su colaborador debe descargar el repositorio su computadora, este paso se le llama clonar un repositorio. Para esto, abran una terminal y realicen lo siguiente:La última parte de esa instrucción es la dirección de su computadora donde se clonara el repositorio de su colaborador.Ahora, el colaborador realizará un cambio en el repositorio. Para esto, creará un archivo, lo añadira al área de preparación, hará el commit correspondiente y enviará los cambios al remoto.Si revisamos en la página de Github, veremos ahora un cambio en el repositorio, junto con el commit y quien lo realizo. Finalmente, actualizaremos el repositorio original local con los cambios del colaborador.Una buena practica cuando se trabaja con colaboradores es realizar la siguiente serie de pasos:Antes de comenzar trabajar, siempre actualizar nuestro repositorio local con git pull origin mainAntes de comenzar trabajar, siempre actualizar nuestro repositorio local con git pull origin mainRealizar cambios y añadirlos al área de preparación con git addRealizar cambios y añadirlos al área de preparación con git addRealizar el commit con un mensaje apropiado que nos permita detectar que cambio se realizó.Realizar el commit con un mensaje apropiado que nos permita detectar que cambio se realizó.Actualizar el repositorio remoto con los cambios usando git push origin main.Actualizar el repositorio remoto con los cambios usando git push origin main.Otra buena practica es trabajar con ramas, este sería un paso antes del 2.Ejercicio: Replicar lo que se hizo en esta sección cambiando roles de quien es el colaborador y quien el dueño del repositorio local.","code":"$ git clone git@github.com:User/Mi_primer_repo.git ~/colaborador-Mi_primer_repo$ nano notas.txt\n$ git add notas.txt\n$ git commit -m \"Añadimos archivo de colaborador\"\n$ git push origin main$ git pull origin main"},{"path":"git-y-github.html","id":"conflictos","chapter":"Sección 3 Git y Github","heading":"3.8 Conflictos","text":"Cuando comenzamos trabajar con colaboradores, es usual que generemos conflictos si se trabaja de forma adecuada.Vamos crear un conflicto para después resolverlo.El colaborador va modificar el notas.txt añadiendo algo. Luego lo añadirá al área de preparación, realizará el commit correspondiente y finalmente actualizará el repositorio remoto.Ahora, el dueño del repositorio realizará un cambio también al archivo notas (sin antes actualizar con los últimos cambios del colaborador) y realizará todos los pasos hasta poder actualizar el repositorio remoto.Git autorizo hacer el push porque había cambios en el remoto que habíamos actualizado en el local, entonces vamos actualizar el local primero, hacer un merge en la copia en la que estamos trabajando y después ya hacer un push.Vamos ver un mensaje de que hay un merge que pudo resolver porque se trabajo en la misma línea en el mismo archivo. Si abrimos el archivo vamos ver algo como lo siguiente:Ahora lo que tenemos que hacer es decidir que cambios queremos conservar, para eso, podemos borrar nuestros cambios, los del colaborador, ambos, o cambiar todo por algo nuevo (y borrar los identificadores de los conflictos).Una vez finalizado el merge/resolver conflicto, ya podemos añadirlo al área de preparación, realizar el commit y enviarlo al remoto.Cuando el colaborador intente hacer un git pull verá ningún conflicto ya que git conservo el registro de que se resolvió y la copia del colaborador se actualizará sin ningún problema.Una forma de evitar algunos conflictos es trabajando en ramas, o distribuyendo el trabajo y que cada quien trabaje sobre archivos diferentes.También se puede dar el caso de que los conflictos sean por archivos con el mismo nombre pero con contenidos totalmente diferentes, por ejemplo con imágenes.Vamos crear de nuevo un conflicto con una imagen y vamos tratar de resolverlo. Tanto el colaborador como el dueño del proyecto va crear una imagen con el nombre imagen_prueba.jpg, guardará los cambios y realizará todo hasta mandarlo al repositorio remoto.Lo añadimos al área de preparación, realizamos commit y lo enviamos al repositorio remoto.El colaborador realizará un push de su imagen al repositorio remoto.Ahora el dueño del repositorio tratará de hacer un push también al repositorio.Lo primero que nos va pasar y decir git, es que actualizamos nuestro repositorio con los cambios como en el ejercicio anterior. Vamos hacer un pull.Nos va marcar que hay conflictos y que puede hacer auto merge y nos dirá adicionalmente un mensaje similar al siguiente:Esto se debe que como es un archivo que es de texto puede empalmar los cambios. Entonces las opciones que tenemos es decidir quedarnos con solo una de las dos imágenes o renombrarlas para quedarnos con ambos.Quedarnos con la imagen del dueño del repo:La imagen del dueño del repo es el HEAD y la del colaborador tiene un id de commit. Entonces procedemos lo siguiente.Quedarnos con la imagen del colaborador del repo:La imagen del colaborador tiene un id de commit, buscarlo. Entonces procedemos lo siguiente.Quedarnos con ambas imágenes:Y finalmente para remover la imagen de prueba y añadir las dos nuevas versiones:","code":"$ nano notas.txt\n$ git add notas.txt\n$ git commit -m \"Modificamos el archivo notas para crear un conflicto\"\n$ git push origin main$ nano notas.txt\n$ git add notas.txt\n$ git commit -m \"Cambios en el archivo notas por el dueño del repositorio\"\n$ git push origin main$ git pull origin maintexto aqui\n<<<<<<< HEAD\ncambios locales aqui\n=======\ncambios del colaborador aqui\n>>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d$ git add notas.txt\n$ git status\n$ git commit -m \"Resolvimos el conflicto en el archivo notas\"\n$ git push origin main$ git pull origin main$ head -c 1024 /dev/urandom > imagen_prueba.jpg\n$ ls -lh imagen_prueba.jpg$ git add imagen_prueba.jpg\n$ git commit -m \"Se creo imagen random para generar conflicto.\"$ git push origin main$ git push origin main$ git pull origin mainwarning: Cannot merge binary files: imagen_prueba.jpg (HEAD vs. 439dc8c08869c343538f6dc4a2b615b05b93c76e)$ git checkout HEAD imagen_prueba.jpg\n$ git add imagen_prueba.jpg\n$ git commit -m \"Usar la imagen del dueño del repo en lugar de la del colaborador\"$ git checkout 439dc8c0 imagen_prueba.jpg\n$ git add imagen_prueba.jpg\n$ git commit -m \"Usar la imagen del colaborador del repo en lugar de la del dueño\"git checkout HEAD imagen_prueba.jpg\n$ git mv imagen_prueba.jpg imagen_prueba-dueño.jpg\n$ git checkout 439dc8c0 imagen_prueba.jpg\n$ mv imagen_prueba.jpg imagen_prueba-colaborador.jpg$ git rm imagen_prueba.jpg\n$ git add imagen_prueba-dueño.jpg\n$ git add imagen_prueba-colaborador.jpg\n$ git commit -m \"Use two images: dueño y colaborador\"\n$ git push origin main"},{"path":"git-y-github.html","id":"trabajando-con-ramas","chapter":"Sección 3 Git y Github","heading":"3.9 Trabajando con Ramas","text":"Trabajar con ramas en Git es una parte fundamental del flujo de trabajo colaborativo. Los siguientes pasos son los básicos para trabajar de esta manera.","code":""},{"path":"git-y-github.html","id":"crear-una-rama","chapter":"Sección 3 Git y Github","heading":"3.9.1 1. Crear una rama","text":"Cuando trabajas en un proyecto, es una buena práctica crear una rama separada para cada nueva función o corrección de errores que estés desarrollando. Para crear una nueva rama en Git, utiliza el comando:Este comando crea una nueva rama y te cambia ella al mismo tiempo.Otra opción es la siguiente:","code":"$ git checkout -b nombre_de_la_rama$ git branch nombre_de_la_rama\n$ git switch nombre_de_la_rama"},{"path":"git-y-github.html","id":"trabajar-en-la-rama","chapter":"Sección 3 Git y Github","heading":"3.9.2 2. Trabajar en la rama","text":"Después de crear la rama, puedes comenzar trabajar en tus cambios. Realiza tus modificaciones en los archivos como lo harías normalmente.","code":""},{"path":"git-y-github.html","id":"agregar-y-confirmar-cambios","chapter":"Sección 3 Git y Github","heading":"3.9.3 3. Agregar y confirmar cambios","text":"Una vez que hayas realizado cambios que desees incluir en la rama, añádelos al área de preparación con:Luego, confirma los cambios con un mensaje descriptivo:","code":"$ git add nombre_del_archivo$ git commit -m \"Mensaje descriptivo de los cambios\""},{"path":"git-y-github.html","id":"empujar-la-rama-al-repositorio-remoto","chapter":"Sección 3 Git y Github","heading":"3.9.4 4. Empujar la rama al repositorio remoto","text":"Si estás trabajando en un repositorio remoto compartido con otros colaboradores, es posible que desees compartir tus cambios. Para esto, hay dos formas de hacerlo. La primera es enviar los cambios una rama remota y después confirmarlos y unirlos, para eso utiliza el comando:Esto enviará la nueva rama y los cambios asociados al repositorio remoto.","code":"$ git push origin nombre_de_la_rama"},{"path":"git-y-github.html","id":"fusionar-cambios","chapter":"Sección 3 Git y Github","heading":"3.9.5 5. Fusionar cambios","text":"Una vez que hayas completado tus cambios y estés listo para incorporarlos al proyecto principal, puedes fusionar tu rama con la rama principal (generalmente main o master). Para hacerlo, primero cámbiate la rama principal:Otra opción:Luego, fusiona tu rama con la rama principal:NOTA: Los pasos 4 y 5 se pueden intercambiar de orden, es decir primero hacer el merge local cambiandonos la rama principal y después enviando los cambios al remoto. Es importante primero hacer un git pull para actualizar nuestro local en la rama principal.","code":"$ git checkout main$ git switch main$ git merge nombre_de_la_rama"},{"path":"git-y-github.html","id":"resolver-conflictos-si-los-hay","chapter":"Sección 3 Git y Github","heading":"3.9.6 6. Resolver conflictos (si los hay)","text":"Es posible que ocurran conflictos durante el proceso de fusión si otros colaboradores han realizado cambios en las mismas partes de los archivos. Git te indicará los conflictos y te permitirá resolverlos manualmente.","code":""},{"path":"git-y-github.html","id":"eliminar-la-rama-opcional","chapter":"Sección 3 Git y Github","heading":"3.9.7 7. Eliminar la rama (opcional)","text":"Una vez que hayas fusionado tus cambios en la rama principal y ya necesites la rama de la función, puedes eliminarla:","code":"$ git branch -d nombre_de_la_rama"},{"path":"git-y-github.html","id":"actualizar-y-sincronizar","chapter":"Sección 3 Git y Github","heading":"3.9.8 8. Actualizar y sincronizar","text":"Es importante mantener tu repositorio local actualizado con los cambios de otros colaboradores. Para hacerlo, utiliza:Esto traerá los últimos cambios de la rama principal del repositorio remoto y los fusionará con tu rama local.Siguiendo estos pasos, podrás trabajar de manera efectiva con ramas en Git en un entorno colaborativo. Recuerda comunicarte con tus colaboradores y mantener un flujo de trabajo ordenado para evitar conflictos y errores.","code":"$ git pull origin main"},{"path":"git-y-github.html","id":"conectar-con-overleaf","chapter":"Sección 3 Git y Github","heading":"3.10 Conectar con overleaf","text":"Lo primero es crear el documento en Overleaf que nos interesa. Después se clona el archivo con la dirección que da Overleaf. Esa será la ruta de la carpeta. De manera local podemos cambiar el propio archivo .tex por uno que ya tengamos (parece que es más fácil hacer esto que intentar crear un nuevo documento en Overleaf partir un repositorio existente, pero falta hacer más pruebas); también, es posible cambiar el nombre de la carpeta en la cual se generó el repositorio (parece que hay problemas con Overleaf pero hay que hacer más pruebas).continuación los pasos para trabajar localmente una vez que ya se tiene el repositorio creado.cd ruta_de_la_carpetacd ruta_de_la_carpetagit branch nombre_rama_localgit branch nombre_rama_localgit switch nombre_rama_local (o master)git switch nombre_rama_local (o master)git status (para ver cambios)git status (para ver cambios)git add . (para añadir los cambios-todos)git add . (para añadir los cambios-todos)`git commit -m “nombre del mensaje”```git commit -m “nombre del mensaje”``git switch mastergit switch mastergit pullgit pullgit merge nombre_rama_localgit merge nombre_rama_localgit switch nombre_rama_local\n(b) git merge master (para actualizar ahora rama local)\n(c) seguir trabajando sobre la misma rama local\n(d) repetir de 4 9git pushgit pushgit branch -d nombre_rama_localgit branch -d nombre_rama_local","code":""},{"path":"python.html","id":"python","chapter":"Sección 4 Python","heading":"Sección 4 Python","text":"","code":""},{"path":"python.html","id":"tipos-de-datos","chapter":"Sección 4 Python","heading":"4.1 Tipos de datos","text":"","code":""},{"path":"python.html","id":"flujo-de-control","chapter":"Sección 4 Python","heading":"4.2 Flujo de control","text":"","code":""},{"path":"python.html","id":"visualización-de-datos","chapter":"Sección 4 Python","heading":"4.3 Visualización de datos","text":"","code":""},{"path":"python.html","id":"manipulación-de-bases-de-datos","chapter":"Sección 4 Python","heading":"4.4 Manipulación de bases de datos","text":"","code":""},{"path":"python.html","id":"análisis-exploratorio-de-bases-de-datos","chapter":"Sección 4 Python","heading":"4.5 Análisis exploratorio de bases de datos","text":"","code":""},{"path":"python.html","id":"funciones-y-scripts","chapter":"Sección 4 Python","heading":"4.6 Funciones y scripts","text":"","code":""},{"path":"python.html","id":"buenas-practicas","chapter":"Sección 4 Python","heading":"4.7 Buenas practicas","text":"","code":""},{"path":"python.html","id":"procesamiento-de-alto-rendimiento","chapter":"Sección 4 Python","heading":"4.8 Procesamiento de alto rendimiento","text":"","code":""},{"path":"python.html","id":"programación-en-paralelo","chapter":"Sección 4 Python","heading":"4.9 Programación en paralelo","text":"","code":""},{"path":"sql.html","id":"sql","chapter":"Sección 5 SQL","heading":"Sección 5 SQL","text":"","code":""},{"path":"sql.html","id":"bases-de-datos-y-manipulación","chapter":"Sección 5 SQL","heading":"5.1 Bases de datos y manipulación","text":"","code":""},{"path":"sql.html","id":"explorar-datos-categóricos-y-texto-no-estructurado","chapter":"Sección 5 SQL","heading":"5.2 Explorar datos categóricos y texto no estructurado","text":"","code":""},{"path":"sql.html","id":"comparación-con-los-otros-programas","chapter":"Sección 5 SQL","heading":"5.3 Comparación con los otros programas","text":"","code":""},{"path":"sql.html","id":"valores-faltantes","chapter":"Sección 5 SQL","heading":"5.4 Valores faltantes","text":"","code":""},{"path":"sql.html","id":"combinar-bases-de-datos","chapter":"Sección 5 SQL","heading":"5.5 Combinar bases de datos","text":"","code":""},{"path":"power-bi.html","id":"power-bi","chapter":"Sección 6 Power BI","heading":"Sección 6 Power BI","text":"","code":""},{"path":"power-bi.html","id":"introducción-a-power-bi","chapter":"Sección 6 Power BI","heading":"6.1 Introducción a Power BI","text":"","code":""},{"path":"power-bi.html","id":"transformando-y-visualizando-datos","chapter":"Sección 6 Power BI","heading":"6.2 Transformando y visualizando datos","text":"","code":""},{"path":"power-bi.html","id":"manipulación-de-bases-de-datos-1","chapter":"Sección 6 Power BI","heading":"6.3 Manipulación de bases de datos","text":"","code":""},{"path":"power-bi.html","id":"análisis-exploratorio-de-bases-de-datos-1","chapter":"Sección 6 Power BI","heading":"6.4 Análisis exploratorio de bases de datos","text":"","code":""},{"path":"power-bi.html","id":"variables-categóricas-y-continuas","chapter":"Sección 6 Power BI","heading":"6.5 Variables categóricas y continuas","text":"","code":""},{"path":"r.html","id":"r","chapter":"Sección 7 R","heading":"Sección 7 R","text":"","code":""},{"path":"r.html","id":"tipos-de-datos-1","chapter":"Sección 7 R","heading":"7.1 Tipos de datos","text":"","code":""},{"path":"r.html","id":"manipulación-de-bases-de-datos-2","chapter":"Sección 7 R","heading":"7.2 Manipulación de bases de datos","text":"","code":""},{"path":"r.html","id":"análisis-exploratorio-de-bases-de-datos-2","chapter":"Sección 7 R","heading":"7.3 Análisis exploratorio de bases de datos","text":"","code":""},{"path":"r.html","id":"reportes-con-rmarkdown","chapter":"Sección 7 R","heading":"7.4 Reportes con RMarkdown","text":"","code":""},{"path":"r.html","id":"páginas-web","chapter":"Sección 7 R","heading":"7.5 Páginas web","text":"","code":""}]
